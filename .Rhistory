y = NULL)
FlxAvgS_LPlot_n <- FlxAvgS_LPlot_n + theme(legend.position="none")
FlxAvgS_LPlot_n
# Chunk 10
FlxEndpPlots <- cowplot::plot_grid(FlxAvgS_LPlot, FlxAvgS_LPlot_n,
labels = list("B","C"), label_size = 24)
FlxEndpPlots1 <- cowplot::plot_grid(FlxEndpPlots, legend, rel_widths = c(3, 1))
FlxPlots <- cowplot:::plot_grid(DNT60_VC_Plot, FlxEndpPlots1,
labels = list("A"), label_size = 24,
ncol = 1)
FlxPlots
# ggsave(FlxPlots, file='figures/Figure2_ALL_ctrl.png',
#        width=20,
#        height=15)
# Chunk 11
sample_endpoints_n <- lapply(mc0_n, function(list) {
table <- list[[1]]
})
sample_endpoints_n[c("AUC_L","AUC_D","AUC_T")] = NULL
for (i in 1:13) {
sample_endpoints_n[[i]][, endp := names(sample_endpoints_n)[i]]
}
endp.data_n <- do.call('rbind', sample_endpoints_n)
endp.data_n$transform <- "Transformed"
endp.data$transform <- "Non-transformed"
endp.data_all <- rbind(endp.data, endp.data_n)
FlxAvgS_LPlot_n_0 <-ggplot(endp.data_all[wllt=="v",][endp == "avgS_L"]) +
geom_density(aes(x=rval, fill=as.factor(transform), color = as.factor(transform)), alpha = 0.5) +
theme_bw() +
xlim(-2,10)+
ylim(0,1.8)+
theme(text = element_text(size = 26)) +
scale_color_manual(values = colors[c(1,5)]) +
scale_fill_manual(values = colors[c(1,5)]) +
labs(color = "",
fill = "",
linetype = "",
x = "Endpoint Value",
y = NULL)+
ggtitle("Vehicle controls, AvgS-L")
FlxAvgS_LPlot_n_0
legend <- cowplot::get_legend(FlxAvgS_LPlot_n_0)
FlxAvgS_LPlot_n_0 <- FlxAvgS_LPlot_n_0 + theme(legend.position="none")
FlxAvgS_LPlot_n_max <-ggplot(endp.data_all[conc==max.conc & cpid=="Fluoxetine"][endp == "avgS_L"]) +
geom_density(aes(x=rval, fill=as.factor(transform), color = as.factor(transform)), alpha = 0.5) +
theme_bw() +
xlim(-2,10)+
ylim(0,1.8)+
theme(text = element_text(size = 26)) +
scale_color_manual(values = colors[c(1,5)]) +
scale_fill_manual(values = colors[c(1,5)]) +
labs(
color = "",
fill = "",
linetype = "",
x = "Endpoint Value",
y = NULL)+
ggtitle(paste0("Fluoxetine (4uM), AvgS-L"))
FlxAvgS_LPlot_n_max
FlxAvgS_LPlot_n_max <- FlxAvgS_LPlot_n_max + theme(legend.position="none")
# Chunk 12
FlxEndpPlots <- cowplot::plot_grid(FlxAvgS_LPlot_n_0, FlxAvgS_LPlot_n_max,
labels = list("B","C"), label_size = 24)
FlxEndpPlots
FlxEndpPlots1 <- cowplot::plot_grid(FlxEndpPlots, legend,
rel_widths = c(5,1))
FlxPlots <- cowplot:::plot_grid(DNT60_VC_Plot, FlxEndpPlots1,
labels = list("A"), label_size = 24,
ncol = 1)
FlxPlots
ggsave(FlxPlots, file='figures/Figure2_overlay_transform_non_transform_maxfluox_ctrl_nov2023.png',
width=21,
height=12)
# Chunk 13
# Raw endpoint data for Fluoxetine vehicle control
raw_stats1 <- endp.data_all[wllt=="v", .(mean=mean(rval,na.rm=T),median=median(rval,na.rm=T)), by=.(endp,transform)]
raw_stats1_l <- data.table::melt(raw_stats1, id.vars = c("endp","transform"), variable.name = "stat")
endp.data_allx <- endp.data_all[!(wllt=='v' & endp =='AUC_r' & rval > 15) & !endp == 'avgS_L',]
raw_plot_facet <- ggplot(endp.data_allx[wllt=="v"]) +
geom_density(aes(x=rval, fill=as.factor(transform), color = as.factor(transform)), alpha = 0.5) +
theme_bw() +
theme(text = element_text(size = 16)) +
facet_wrap(~endp, scales = "free") +
scale_color_manual(values = colors[c(1,5)]) +
scale_fill_manual(values = colors[c(1,5)])
raw_plot_facet <- raw_plot_facet +
# geom_vline(data = raw_stats1_l, aes(xintercept=value, linetype=stat), color = rep(colors[c(1,5)],26), size=1) +
#scale_linetype_discrete(labels = c("Mean","Median")) +
labs(
#title = "Box-Cox Power Transformation, All endpoints",
#color = "Data transformation",
#fill = "Data transformation",
x = "Raw Endpoint Value",
y = "Density")
raw_plot_facet
ggsave(raw_plot_facet, file='figures/Supp_Figure1_data_transform_all_end_nov2023.png',
width=16,
height=10)
# Chunk 14
sample.endp.stats <- endp.data[wllt=="v", .(mean=mean(rval,na.rm=T), variance=stats::var(rval,na.rm=T)), by=.(endp)]
sample.endp.stats[, `:=` (mean = signif(mean,digits=3), variance = signif(variance,digits=3))]
DT::datatable(sample.endp.stats, colnames=c("Endpoint Abbreviation","Mean","Variance"),
caption = "Raw Endpoint Data Statistics for DNT60 Screening Vehicle Control")
# Chunk 15
endp.data[wllt=='v', .N, by=endp]
sample.endp.stats <- endp.data_all[wllt=="v", .(mean=mean(rval,na.rm=T), sd=stats::sd(rval,na.rm=T)), by=.(endp,transform)]
sample.endp.stats[, cv := sd/mean * 100]
sample.endp.stats[, `:=` (mean = signif(mean,digits=3), sd = signif(sd,digits=3), cv = signif(cv, digits=3))]
stats1 <- dcast(sample.endp.stats, endp ~ transform, value.var = "mean" )
setnames(stats1, "Non-transformed","Mean_Non_transformed")
setnames(stats1, "Transformed","Mean_Transformed")
stats2 <- dcast(sample.endp.stats, endp ~ transform, value.var = "sd" )
setnames(stats2, "Non-transformed","SD_Non_transformed")
setnames(stats2, "Transformed","SD_Transformed")
stats3 <- dcast(sample.endp.stats, endp ~ transform, value.var = "cv" )
setnames(stats3, "Non-transformed","CV_Non_transformed")
setnames(stats3, "Transformed","CV_Transformed")
sample.endp.stats <- merge(stats1, stats2, by='endp')
sample.endp.stats <- merge(sample.endp.stats, stats3, by='endp')
DT::datatable(sample.endp.stats, colnames=c("Endpoint","Mean","SD"),
caption = "Data Transformation")
write.csv(sample.endp.stats, 'output/Data_transformation_stats_veh_contorl_Nov2023.csv')
# Chunk 16
sample.endp.stats_n <- endp.data_n[wllt=="v", .(mean=mean(rval,na.rm=T), variance=stats::var(rval,na.rm=T)), by=.(endp)]
sample.endp.stats_n[, `:=` (mean = signif(mean,digits=3), variance = signif(variance,digits=3))]
DT::datatable(sample.endp.stats_n, colnames=c("Endpoint Abbreviation","Mean","Variance"),
caption = "Transformed Endpoint Data Statistics for DNT60 Screening Vehicle Control")
# Chunk 17
bxcx.params <- lapply(mc0_n, function(data) {
as.data.table( data[c(2,3)] )
})
bxcx.params.dt <- do.call('rbind', bxcx.params)
bxcx.params.dt[, endp := names(bxcx.params)]
datatable(bxcx.params.dt[, .(endp,lam.hat,shift)], colnames=c("Endpoint Abbreviation","Lambda","Shift"),
caption = "Box-Cox Power Transformation Parameters for Endpoints")
# Chunk 18
# Endpoints to exclude
exclude <- c("AUC_L","AUC_D","AUC_T")
# Number of active chemical-endpoint pairs
tcpl_out.dt[hitcall>0.8 & !endp%in%exclude, .N]
# Number of active chemicals
length( tcpl_out.dt[hitcall>0.8 & !endp%in%exclude, unique(name)] )
# Chunk 19
# Popular fits for all endpoint data
tcpl_out.dt[!endp%in%exclude, .N, by = .(fit_method)]
# Popular fits for active curve-fits
tcpl_out.dt[!endp%in%exclude & hitcall>0.8, .N, by = .(fit_method)]
# Chunk 20
# Isolate chemicals with active endpoints optimally fitted by poly1
chemicals <- tcpl_out.dt[hitcall>0.8 & fit_method=="poly1" & !endp%in%c("AUC_L","AUC_D","AUC_T"), unique(name)]
# Is developmental toxicity associated with these chemicals?
litReviewConc[, dev_LOEL := min(.SD[devtox==1,conc]), by=.(cpid)]
litReviewConc[is.infinite(dev_LOEL), dev_LOEL := NA]
litReviewConc[cpid%in%chemicals, .(dev_LOEL = unique(dev_LOEL)), by = .(cpid)]
# Chunk 21
count.hits.endp <- tcpl_out.dt[hitcall>0.8 & !endp%in%exclude, unique(name), by = .(endp)][, .N, by = .(endp)]
datatable(count.hits.endp[order(-N)], colnames=c("Endpoint Abbreviation","Number of Active Chemicals"), caption = "Number of Chemicals Active in Each Endpoint",
rownames = FALSE)
# Chunk 22
exclude <- c('AUC_L','AUC_D','AUC_T')
# binary hitcall
mc5 <- tcpl_out.dt[!endp %in% exclude,]
mc5[ , hitc := ifelse(hitcall>0.8, 1, 0)]
mc5[hitc==0, bmd := NA]
mc5[hitc==0, top_over_cutoff := NA]
# summary table by aenm
mc5.sum.endp <- mc5[, list(
hitsum = sum(hitc),
bmd.med = median(bmd, na.rm=T),
bmd.mean = mean(bmd, na.rm=T),
bmd.sd = sd(bmd, na.rm=T)),
# toc.mean = mean(top_over_cutoff, na.rm=T),
# toc.sd = sd(top_over_cutoff, na.rm=T)),
by= endp][order(-hitsum)]
cols <- c('bmd.mean','bmd.sd','bmd.med')
mc5.sum.endp[,(cols) := round(.SD,3), .SDcols=cols]
write.csv(mc5.sum.endp, 'output/Endp_tbl_summary_stat_23Nov23.csv')
# summary table by chemical
mc5.sum <- mc5[, list(
hitsum = sum(hitc),
bmd.min = min(bmd, na.rm=T),
bmd.med = median(bmd, na.rm=T),
bmd.mean = mean(bmd, na.rm=T),
bmd.sd = sd(bmd, na.rm=T),
toc.mean = mean(top_over_cutoff, na.rm=T),
toc.sd = sd(top_over_cutoff, na.rm=T)),
by= name]
cols <- c('bmd.min','bmd.med','bmd.mean','bmd.sd','toc.mean','toc.sd')
mc5.sum[,(cols) := round(.SD,2), .SDcols=cols]
max.conc.tbl <- endp.data[, list(max.conc = max(conc)), by=cpid]
mc5.sum$max.conc <- max.conc.tbl$max.conc[match(mc5.sum$name, max.conc.tbl$cpid)]
write.csv(mc5.sum, 'output/Chem_tbl_summary_stat.csv') # table 4
active.hits <- mc5[hitc==1]
nrow(active.hits)
nrow(mc5[top_over_cutoff <1.5,])
high.eff <- active.hits[top_over_cutoff>1.5,]
unique(high.eff$name)
# mean efficacy by endpoint
mc5.eff.sum <- mc5[, list(toc.mean.end = mean(top_over_cutoff, na.rm=T),
top.sd.end = sd(top_over_cutoff, na.rm=T)), by=endp]
# regression plot max conc tested
mc5$max.conc <- max.conc.tbl$max.conc[match(mc5$name, max.conc.tbl$cpid)]
mc5[, hitsum := sum(hitc), by=name]
library(ggpubr)
library(ggplot2)
library(ggpmisc)
p1 <- ggscatter(
mc5, y = "top_over_cutoff" , x = "max.conc",
#color = variable, palette = "blues",
add = "reg.line"
) +
# stat_cor(label.y=3.0,
#          aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))) +
# stat_regline_equation(label.y=2.9)+
stat_cor(label.y = 3.0) +
stat_regline_equation(label.y = 2.9)+
labs(title="Effect size versus maximum concentration tested",
x="Maximum Concentration (uM)")
#y = expression(paste("Mean AC50 (log10 ",mu,"M)")))+
# ylim(c(-2,3))
p1
lm1 <- lm(max.conc~top_over_cutoff, data = mc5)
summary(lm1)
p2 <- ggscatter(
mc5[!hitsum==0,], y = "top_over_cutoff" , x = "hitsum",
#color = "name",
add = "reg.line"
) +
# stat_cor(label.y=3.0,
#          aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))) +
# stat_regline_equation(label.y=2.9)+
stat_cor(label.y = 3.0) +
stat_regline_equation(label.y = 2.9)+
labs(title="Effect size versus hit rate by chemical",
x="Hit Rate by chemical")
#y = expression(paste("Mean AC50 (log10 ",mu,"M)")))+
# ylim(c(-2,3))
p2
lm2 <- lm(hitsum~top_over_cutoff, data = mc5)
summary(lm2)
p.all <- cowplot:::plot_grid(p1, p2,
labels = "AUTO", label_size = 24,
ncol = 2)
ggsave(p.all, file='figures/fig_supp6_Cowplot_regression_top_over_cutoff.tiff',
width=11, height=5, dpi=300)
# Chunk 23
# histogram plot of the top over cutoff for hits
end.common <- c('avgS_T','avgS_D','avgS_L','AUC_r')
mc5$end.cat <- "Expanded"
mc5[endp %in% end.common, end.cat := "Commonly studied"]
unique(mc5$end.cat)
mc5[hitc==1, median.toc := median(top_over_cutoff), by=endp]
p4 <- ggplot(mc5[hitc==1], aes(x=top_over_cutoff, y=reorder(endp, median.toc), fill=end.cat))+
geom_boxplot(alpha=0.3)+
geom_point()+
#scale_fill_grey()+
scale_fill_manual(values=c( "#E69F00", "#56B4E9"), name="Endpoint Category")+
#scale_fill_discrete(name="Endpoint Category")+
ylab("")+
theme_classic()+
ggtitle("Boxplot of effect size by endpoint")+
theme(
legend.position = c(.8, .2)
)+
theme(text= element_text(size=14))
p4
mc5[hitc==1, median.toc.chem := median(top_over_cutoff), by=name]
mc5.temp <- mc5[name %in% 'Polybrominated diphenyl ether (PBDE)-47', name := 'PBDE-47']
p5 <- ggplot(mc5.temp[hitc==1], aes(x=top_over_cutoff, y=reorder(name, median.toc.chem)))+
geom_boxplot(alpha=0.3)+
geom_point(aes(color=end.cat), size=3)+
guides(fill = "none")+
scale_color_manual(values=c( "#E69F00", "#56B4E9"), name="Endpoint Category")+
#scale_color_grey(guide="none")+
#scale_color_discrete(name="Endpoint Category")+
ylab("")+
theme_classic()+
ggtitle("Boxplot of effect size by chemical")+
theme(
legend.position = c(.8, .2)
)+
theme(text= element_text(size=14))
p5
# compare top over cutoff to other assay endpoints
# library(tcpl)
# tcplConf(user='_dataminer', pass='pass', #insert user and pass
#          db='prod_internal_invitrodb_v4_1', drvr='MySQL',
#          host='ccte-mysql-res.epa.gov') #insert host
#
# # Load mc data
# mean(mc5[hitc==1, top_over_cutoff])
# sd(mc5[hitc==1, top_over_cutoff])
# neuro.asids <- c(20,31)
# neuro.assays <- tcplLoadAeid(val=neuro.asids, fld='asid',add.fld='acid')
# neuro.assays <- neuro.assays[!grep("acute",aenm),]
#mc5.neuro <- tcplPrepOtpt(tcplLoadData(lvl=5,type='mc', fld='aeid',val=neuro.assays$aeid, add.fld=T))
#save(mc5.neuro, file= 'output/ToxCast_dnt_end_mc5_invitrodb_4_1_22Nov23.Rdata')
load('output/ToxCast_dnt_end_mc5_invitrodb_4_1_22Nov23.Rdata')
# chems.match <- as.data.table(unique(mc5$name))
# chems.match$chnm <- mc5.neuro$chnm[match(chems.match$V1, mc5.neuro$chnm)]
library(openxlsx)
#write.xlsx(chems.match, 'output/Map_chems_to_chnm_kelly_22Nov23.xlsx')
chems.match2 <- as.data.table(read.xlsx('output/Map_chems_to_chnm_kelly_22Nov23_edit.xlsx'))
chems.match2$chnm2 <- mc5.neuro$chnm[match(chems.match2$chnm, mc5.neuro$chnm)]
mc5.sub <- mc5.neuro[chnm %in% chems.match2$chnm,]
mc5.sub <- mc5.sub[!is.na(chnm),]
mc5.sub[,  hitc2 := ifelse(hitc>=0.9,1,0)]
mean(mc5.sub[hitc==1, top_over_cutoff])
sd(mc5.sub[hitc==1, top_over_cutoff])
quantile(mc5.sub[hitc==1, top_over_cutoff], 0.95)
mc5.sub$assay <- "Other DNT assays"
mc5$assay <- "Zebrafish assay"
mc5.hist1 <- mc5[, c('name','endp','hitc','top_over_cutoff','assay')]
setnames(mc5.hist1, "name","chnm")
setnames(mc5.hist1, "endp","aenm")
mc5.hist2 <- mc5.sub[, c('chnm','aenm','hitc2','top_over_cutoff','assay')]
setnames(mc5.hist2, "hitc2","hitc")
df.hist <- rbind(mc5.hist1, mc5.hist2)
df.hist$end.cat <- mc5$end.cat[match(df.hist$aenm, mc5$endp)]
df.hist[assay %in% "Other DNT assays", end.cat := "Other DNT assays"]
p6 <- ggplot(df.hist[hitc==1 & top_over_cutoff < 15], aes(x=top_over_cutoff,  fill=end.cat, color=end.cat))+
geom_density(alpha=0.38, position="identity")+
#scale_color_grey()+scale_fill_grey() +
scale_fill_manual(values=c( "#E69F00", "#56B4E9", "#999999"), name="Endpoint Category")+
scale_color_manual(values=c( "#E69F00", "#56B4E9", "#999999"), name="Endpoint Category")+
theme_classic()+
ggtitle("Distribution of effect size")+
theme(
legend.position = c(.8, .3)
)+
xlim(0,10)+
theme(text= element_text(size=14))
p6
p.all <- cowplot:::plot_grid(p4, p5, p6,
labels = "AUTO", label_size = 20,
ncol = 1)
ggsave(p.all, file='figures/Cowplot_top_over_cutoff_histos_long_08April2025.tiff',
width=8, height=11, dpi=300)
mc5[, modl := fit_method]
model <- lm(top_over_cutoff ~ max.conc + hitsum  +end.cat + modl + bmd, data = mc5[hitc==1])
summary(model)
library(broom)
tidy_lmfit <- tidy(model)
tidy_lmfit
# Chunk 24
p1 <- ggscatter(
mc5, y = "bmd" , x = "max.conc",
#color = variable, palette = "blues",
add = "reg.line"
) +
# stat_cor(label.y=3.0,
#          aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))) +
# stat_regline_equation(label.y=2.9)+
stat_cor(label.y = 90) +
stat_regline_equation(label.y = 85)+
labs(title="Effect size versus maximum concentration tested",
x="Maximum Concentration (uM)")
#y = expression(paste("Mean AC50 (log10 ",mu,"M)")))+
# ylim(c(-2,3))
p1
lm1 <- lm(max.conc~bmd, data = mc5)
summary(lm1)
p2 <- ggscatter(
mc5[!hitsum==0,], y = "bmd" , x = "hitsum",
#color = "name",
add = "reg.line"
) +
# stat_cor(label.y=3.0,
#          aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))) +
# stat_regline_equation(label.y=2.9)+
stat_cor(label.y = 90) +
stat_regline_equation(label.y = 85)+
labs(title="Effect size versus hit rate by chemical",
x="Hit Rate by chemical")
#y = expression(paste("Mean AC50 (log10 ",mu,"M)")))+
# ylim(c(-2,3))
p2
lm2 <- lm(hitsum~bmd, data = mc5)
summary(lm2)
# p3 <- ggplot(mc5[hitc==1], aes(x=bmd, color=end.cat, fill=end.cat))+
#   geom_histogram(alpha=0.5, position="identity")+
#   scale_color_grey()+scale_fill_grey() +
#   theme_classic()+
#   ggtitle("Distribution of 'bmd' values")
# p3
mc5[hitc==1, median.bmd := median(bmd), by=endp]
p4 <- ggplot(mc5[hitc==1], aes(x=log10(bmd), y=reorder(endp, median.bmd), fill=end.cat))+
geom_boxplot(alpha=0.5)+
geom_point()+
#scale_fill_grey()+
scale_fill_discrete(name="Endpoint Category")+
ylab("")+
xlab("BMC (log10-uM)")+
theme_classic()+
ggtitle("Boxplot of BMC values by endpoint")+
theme(
legend.position = c(.8, .2)
)+
theme(text= element_text(size=14))
p4
mc5[hitc==1, median.bmd.chem := median(bmd), by=name]
mc5.temp <- mc5[name %in% 'Polybrominated diphenyl ether (PBDE)-47', name := 'PBDE-47']
p5 <- ggplot(mc5.temp[hitc==1], aes(x=log10(bmd), y=reorder(name, median.bmd.chem)))+
geom_boxplot(alpha=0.5)+
geom_point(aes(color=end.cat), size=3)+
guides(fill = "none")+
#scale_color_grey(guide="none")+
scale_color_discrete(name="Endpoint Category")+
ylab("")+
xlab("BMC (log10-uM)")+
theme_classic()+
ggtitle("Boxplot of BMC values by chemical")+
theme(
legend.position = c(.8, .2)
)+
theme(text= element_text(size=14))
p5
# compare bmc to other assay endpoints
mc5.sub[hitc2==0, bmd := NA]
mean(mc5.sub[hitc2==1, bmd,], na.rm=T)
sd(mc5.sub[hitc2==1, bmd], na.rm=T)
quantile(mc5.sub[hitc2==1, bmd], 0.95, na.rm=T)
mc5.sub$assay <- "Other DNT assays"
mc5$assay <- "Zebrafish assay"
mc5.hist1 <- mc5[, c('name','endp','hitc','bmd','assay')]
setnames(mc5.hist1, "name","chnm")
setnames(mc5.hist1, "endp","aenm")
mc5.hist2 <- mc5.sub[, c('chnm','aenm','hitc2','bmd','assay')]
setnames(mc5.hist2, "hitc2","hitc")
df.hist <- rbind(mc5.hist1, mc5.hist2)
p6 <- ggplot(df.hist[hitc==1 & bmd <100], aes(x=log10(bmd), color=assay, fill=assay))+
geom_density(alpha=0.38, position="identity")+
#scale_color_grey()+scale_fill_grey() +
theme_classic()+
ggtitle("Distribution of 'bmd' values")+
theme(
legend.position = c(.8, .2)
)+
theme(text= element_text(size=14))
p6
#
# p.all <- cowplot:::plot_grid(p4, p5, p6,
#                     labels = "AUTO", label_size = 20,
#                     ncol = 1)
# ggsave(p.all, file='figures/Cowplot_bmd_histos_long.tiff',
#        width=11, height=16, dpi=300)
# map in new activity type categories as of 23 Nov 2023
#endp.out <- data.frame(unique(mc5[, c('endp','end.cat')]))
#write.csv(endp.out, 'output/Endpoint_tbl_list.csv')
endp.in <- as.data.table(read.csv('output/Endpoint_tbl_list_edit_in_23Nov23.csv'))
endp.in$X <- NULL
mc5 <- merge(mc5, endp.in, by=c('endp'))
unique(mc5[, c('endp','Activity.Type','Experimental.Phase')])
#---------------------------------------------------------------------------#
#KC: Try using the complex upset plot
#---------------------------------------------------------------------------#
# setup data table
hits1 <- unique(mc5[hitc==1,c('name','Activity.Type')])
hits1$hit <- 1
dat2 <- dcast(hits1, name ~ Activity.Type, value.var = "hit")
dat2$name <- NULL
dat2[is.na(dat2)] <- 0
dat2[] <- lapply(dat2, as.logical)
library(ComplexUpset)
pipes <- colnames(dat2)
nrow(dat2)
plot1 <- upset(data = dat2, intersect = pipes,
name= "Concordance by Activity Type",
width_ratio = 0.125,
set_sizes=(
upset_set_size()
+ theme(axis.text.x=element_text(angle=90))
))
plot1
#save to file
file.dir <- paste("./figures/", sep="")
file.name <- paste("/fig_upset_plot_activity_type", Sys.Date(), ".png", sep="")
file.path <- paste(file.dir, file.name, sep="")
dir.create(path=file.dir, showWarnings = FALSE, recursive = TRUE)
png(file.path,
width = 11,
height = 4.8, #change from 8 to 20
units = "in",
res = 300)
plot1
dev.off()
#---------------------------------------------------------------------------#
#KC: Try using the complex upset plot; experimental phase
#---------------------------------------------------------------------------#
# setup data table
hits1 <- unique(mc5[hitc==1,c('name','Experimental.Phase')])
hits1$hit <- 1
dat2 <- dcast(hits1, name ~ Experimental.Phase, value.var = "hit")
dat2$name <- NULL
library(ComplexUpset)
pipes <- colnames(dat2)
nrow(dat2)
plot2 <- upset(data = dat2, intersect = pipes,
name= "Concordance by Experimental Phase",
min_size = 0,
width_ratio = 0.125,
set_sizes=(
upset_set_size()
+ theme(axis.text.x=element_text(angle=90))
))
plot2
p.all <- cowplot::plot_grid(plot1, plot2, scale=0.95,
rel_widths = c(9,7),
labels = "AUTO", label_size = 20)
p.all
ggsave(p.all, file='figures/Cowplot_upset_plot_A_B.tiff',
width=12, height=5, dpi=300)
