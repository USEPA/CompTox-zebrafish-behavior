---
title: "R Analyses and Figures for Manuscript"
author: "Zachary Rowson"
date: "6/7/2022"
output: 
  html_document:
    
    code_folding: hide
    toc: true
editor_options: 
  chunk_output_type: console
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo=TRUE, warning=FALSE)
library(gabi)
library(data.table)
library(DT)
library(sjPlot)
library(ComplexHeatmap)
library(gridExtra)
library(viridis)
library(grid)
library(ggupset)
library(matrixStats)
```

## Introduction

This document will contain all analyses and figures produced in R to be included in the manuscript. Note that these are not all the figures to be included, some were produced in PowerPoint and have been saved as image files.

```{r, load-necessary-data}

# Raw data, endpoint data, and row objects for tcplfit2
load("../Data/Padilla_DNT60_lmr0_w_egid.Rdata")
load("../Data/Padilla_DNT60_mc0.rda")
load("../Data/Padilla_DNT60_mc0_n.rda")
load("../Data/Padilla_DNT60_rows_n.rda")

# Results of curve fitting
load("../Data/Padilla_DNT60_tcplfits.rda") # i'm not sure what this data is... i don't see it in git
load("../Data/Padilla_DNT60_tcpl_out.Rdata")
tcpl_out.dt <- as.data.table(DNT60_tcpl_out)

# Summarizing results of curve-fitting
load("../Data/Padilla_DNT60_Strong Effectors by Endpoint.Rdata")
load("../Data/Padilla_DNT60_BMC ranges.Rdata") # This data needs to be recompiled

# Results of literature review
load("../Data/Padilla_DNT60_Behavioral LOELs.Rdata")
load("../Data/Literature Review Summary.Rdata")
load("../Data/Literature Review Concentrations and Activity.Rdata")
load("../Data/Literature Review LOELs and Dev LOELs.Rdata") 
```

### Example Locomotor Response Data

```{r, edit-CPF-name}
lmr0.egid[cpid=="Chlorpyrifos (ethyl)", cpid := "Chlorpyrifos"]
```

```{r, CPF-SA-timeSeries, include=FALSE}
chemical <- "Chlorpyrifos"

# Units
unit.t = "min"
unit.mov = "cm"
unit.conc = paste0("\U03BC","M")
prsp = "SA"
no.A = 10

# Extract chemical data
group <- unique(lmr0.egid[cpid == chemical, egid])

## Identify movement columns of interest
t.cols <- grep("vt", names(lmr0.egid), value = TRUE)
cols <- t.cols[(no.A+1):length(t.cols)]
A.cols <- t.cols[!(t.cols%in%cols)]

## extract data to be plotted, exclude acclimation
to.fit <- lmr0.egid[cpid==chemical | (wllt=="v" & egid==group), -A.cols, with=FALSE]

# create appropriate axes titles for plots
label.y <- "Speed"

# Format data for plotting

## calculate mean and 50% CIs for each vector column by concentration group, excluding concentration
exclude.A <- t.cols[!(t.cols%in%A.cols)]
means <- to.fit[, lapply(.SD, function(col) mean(col,na.rm=T)),
                .SDcols = exclude.A,
                by = conc]

## calculate CI's for transformed values then transform back
shift <- 1
logCIs <- to.fit[, lapply(.SD, function(x) log10(x+shift)), .SDcols=exclude.A, by=conc][
  , lapply(.SD, function(x) t.test(x,conf.level=0.50)$conf.int), .SDcols=exclude.A, by=conc]
CIs <- logCIs[, lapply(.SD, function(x) (10^x)-shift), by=conc][,lapply(.SD, function(col) abs(diff(col))/2), .SDcols=exclude.A, by=conc]

## elongate means and CIs data, and join
means_long <- data.table::melt(means, id.vars = "conc", variable.name = "t", value.name = "mean")
means_long[, t := sub("vt","",t)]
CIs_long <- data.table::melt(CIs, id.vars = "conc", variable.name = "t", value.name = "CI")
CIs_long[, t := sub("vt","",t)]
stats <- means_long[CIs_long, on = c("conc","t")][, conc := as.factor(conc)]
stats[, t := as.numeric(t)]

# create standard error of mean estimates by time period and plot as ribbons or error bars

# plot time-series data

## create title, x- and y-axis titles, legend labels, and legend title
title <- paste0("Sample Averaged Time-Series for ", chemical)
title.t <- paste0("Time (",unit.t,")")
title.mean <- paste0("Mean ", label.y, " (",unit.mov,"/",unit.t,")")
conc.n <- to.fit[wllq==1, .N, by=.(conc)][order(conc)]
legend.labels <- paste0(conc.n$conc, ", n=", conc.n$N)

title.legend <- paste0("Concentration (", unit.conc, ")")

## get better colors for plotting
N <- length(unique(to.fit[,conc]))
colors <- viridis::viridis(N)

## create x-axis breaks and labels
m <- as.integer(max(means_long[,t]))
x.breaks <- seq(from=no.A,to=m,by=10)
x.labels1 <- 2*seq(from=no.A,to=m,by=10)
x.labels2 <- x.labels1 - 2
x.labels <- paste(x.labels2, x.labels1, sep="-")

## plot
CPFSAplot <- ggplot() +
          geom_point(data = stats, aes(x=t, y=mean, color=as.factor(conc))) +
          geom_line(data = stats, aes(x=t, y=mean, color=conc, group=conc)) +
          scale_x_continuous(breaks = x.breaks, labels = x.labels) +
          scale_color_manual(values = colors, labels=legend.labels) +
          geom_ribbon(data = stats,
                      aes(x=t, ymax=mean+CI, ymin=mean-CI, group=conc, fill=conc),
                      alpha = 0.25) +
          geom_rect(aes(xmin=10,xmax=30,ymin=-1.25,ymax=-0.5) ,fill="white", color="black") +
          geom_rect(aes(xmin=30,xmax=50,ymin=-1.25,ymax=-0.5) ,fill="black", color="black") +
          annotate("text", x=c(20,40), y=rep(-0.875,2), color=c("black","white"), label=c("Light Phase","Dark Phase"), size=3) +
          scale_fill_manual(values = colors, labels=legend.labels) +
          labs(title = title, subtitle = "Acclimation Period Excluded: 50% Confidence Bands",
               x = title.t, y = title.mean, color = title.legend) +
          guides(fill = "none") +
          theme_bw() +
          theme(text = element_text(size = 14))

CPFSAplot
```

### Example tcpl Curve-Fit

```{r, example-curve-fit, warning=FALSE, include=FALSE}
tcplfit <- tcplfits_n[["Chlorpyrifos"]][["avgS_L"]]
tcplfit[["plot"]]
summary <- subset( tcplfit[["summary"]], select = -c(conc,resp) )
summary
```

## Results

### Appearance of Endpoint Data

#### Figure 2 (all controls): Typical Unexposed, Raw Movement Data: The Effect of Transformation on Distributions of Endpoint Data

```{r, large-ctrl-sample-SAplot}
# Time Series for Fluoxetine vehicle control

# Units
unit.t = "2 min"
unit.mov = "cm"
unit.conc = paste0("\U03BC","M")
no.A = 10


# Identify movement columns of interest and extract
t.cols <- grep("vt", names(lmr0.egid), value = TRUE)
cols <- t.cols[(no.A+1):length(t.cols)]
A.cols <- t.cols[!(t.cols%in%cols)]
to.fit <- lmr0.egid[wllt=="v", -A.cols, with=FALSE]

# Melt data and designate Light and Dark time periods
to.fit_melt <- melt(to.fit[,-"egid"], id.vars = names(to.fit)[1:9], variable.name = "t", value.name = "speed")
to.fit_melt[, t := as.factor( gsub("vt","",t) )]
to.fit_melt[t%in%11:30, phase := "Light"]
to.fit_melt[t%in%31:50, phase := "Dark"]

# Create title, x- and y-axis titles, legend labels, and legend title
title.t <- paste0("Time (",unit.t,")")
label.y <- "Speed"
title.mean <- paste0(label.y, " (",unit.mov,"/",unit.t,")")

title.legend <- "Experimental Phase"

## Create x-axis breaks and labels
m <- 50
x.breaks <- c(11, 20, 30, 40, 50)
x.labels1 <- 2*seq(from=no.A,to=m,by=10)
x.labels2 <- x.labels1 - 2
x.labels <- paste(x.labels2, x.labels1, sep="-")

# Printing of graphic isn't working very well so insert new breaks to make space for edges
x.breaks <- c(5, x.breaks, 55)
x.labels <- c("a", x.labels, "b")

## plot
DNT60_VC_Plot <- ggplot(to.fit_melt) +
          geom_boxplot(aes(x=t,y=speed,fill=phase)) +
          scale_x_discrete(breaks = x.breaks, labels = x.labels) +
          scale_fill_manual(values=c("darkgrey","white")) +
          labs(x = title.t, y = title.mean, fill = "Experimental Phase") +
          theme_bw() +
          theme(text = element_text(size = 26))
```

```{r, calculate-speed-data-for-smpl, message = FALSE}
# Raw endpoint data for Fluoxetine vehicle control

sample_endpoints <- data.table::copy(mc0)

sample_endpoints[c("AUC_L","AUC_D","AUC_T")] = NULL
for (i in 1:13) {
  sample_endpoints[[i]][, endp := names(sample_endpoints)[i]]
}

endp.data <- do.call('rbind', sample_endpoints)
max.conc <- max( endp.data[cpid=="Fluoxetine", conc] )

raw_stats <- endp.data[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")][endp == "avgS_L"][, .(mean=mean(rval,na.rm=T),median=median(rval,na.rm=T), sd=sd(rval,na.rm=T)), by=.(conc)]
raw_stats_long <- data.table::melt(raw_stats, id.vars = "conc", variable.name = "stat")
raw_stats_long <- raw_stats_long[!stat %in% "median",]

FlxAvgS_LPlot <- ggplot(endp.data[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")][endp == "avgS_L"]) +
  geom_density(aes(x=rval, fill=as.factor(conc), color = as.factor(conc)), alpha = 0.5) +
  theme_bw() +
  theme(text = element_text(size = 26)) +
  scale_color_manual(values = colors[c(1,5)]) +
  scale_fill_manual(values = colors[c(1,5)]) +
  labs(color = paste0("Concentration (", unit.conc, ")"),
       fill = paste0("Concentration (", unit.conc, ")"),
       linetype = "",
       x = "Raw Endpoint Value",
       y = "Density")

FlxAvgS_LPlot <- FlxAvgS_LPlot + 
                  geom_vline(data = raw_stats_long, aes(xintercept=value, linetype=stat), color = colors[c(1,5,1,5)], size=1) +
                  #scale_linetype_discrete(labels = c("Mean","Median")) +
                  #scale_y_continuous(labels = c("0.0","0.1","0.2","0.3","")) +
                  labs(color = paste0("Concentration (", unit.conc, ")"),
                       fill = paste0("Concentration (", unit.conc, ")"),
                       linetype = "",
                       x = "Raw Endpoint Value",
                       y = NULL)
FlxAvgS_LPlot
legend <- cowplot::get_legend(FlxAvgS_LPlot)

FlxAvgS_LPlot <- FlxAvgS_LPlot + theme(legend.position="none")
```

```{r, calculate-speed-data-for-smpl_N, message = FALSE}
sample_endpoints_n <- lapply(mc0_n, function(list) {
  table <- list[[1]]
})

sample_endpoints_n[c("AUC_L","AUC_D","AUC_T")] = NULL
for (i in 1:13) {
  sample_endpoints_n[[i]][, endp := names(sample_endpoints_n)[i]]
}

endp.data_n <- do.call('rbind', sample_endpoints_n)

trans_stats <- endp.data_n[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")][endp == "avgS_L"][, .(mean=mean(rval,na.rm=T),median=median(rval,na.rm=T), sd=sd(rval,na.rm=T)), by=.(conc)]
trans_stats_long <- data.table::melt(trans_stats, id.vars = "conc", variable.name = "stat")
trans_stats_long
trans_stats_long <- trans_stats_long[!stat %in% "sd",]

FlxAvgS_LPlot_n <-ggplot(endp.data_n[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")][endp == "avgS_L"]) +
  geom_density(aes(x=rval, fill=as.factor(conc), color = as.factor(conc)), alpha = 0.5) +
  theme_bw() +
  theme(text = element_text(size = 26)) +
  scale_color_manual(values = colors[c(1,5)]) +
  scale_fill_manual(values = colors[c(1,5)]) +
  labs(color = paste0("Concentration (", unit.conc, ")"),
       fill = paste0("Concentration (", unit.conc, ")"),
       linetype = "",
       x = "Transformed Endpoint Value",
       y = NULL)

FlxAvgS_LPlot_n <- FlxAvgS_LPlot_n + 
                    geom_vline(data = trans_stats_long, aes(xintercept=value, linetype=stat), color = colors[c(1,5,1,5)], size=1) +
                    scale_linetype_discrete(labels = c("Mean","Median")) +
                    labs(color = paste0("Concentration (", unit.conc, ")"),
                         fill = paste0("Concentration (", unit.conc, ")"),
                         linetype = "",
                         x = "Transformed Endpoint Value",
                         y = NULL)

FlxAvgS_LPlot_n <- FlxAvgS_LPlot_n + theme(legend.position="none")
FlxAvgS_LPlot_n
```

```{r, plot-Flx-data, fig.dim=c(19,13), message = FALSE}
FlxEndpPlots <- cowplot::plot_grid(FlxAvgS_LPlot, FlxAvgS_LPlot_n,
                   labels = list("B","C"), label_size = 24)
FlxEndpPlots1 <- cowplot::plot_grid(FlxEndpPlots, legend, rel_widths = c(3, 1))
FlxPlots <- cowplot:::plot_grid(DNT60_VC_Plot, FlxEndpPlots1,
                    labels = list("A"), label_size = 24,
                    ncol = 1)
FlxPlots

ggsave(FlxPlots, file='figures/Figure2_ALL_ctrl.png',
       width=20,
       height=15)
```

#### Figure 2 (all controls- overlay transform): Typical Unexposed, Raw Movement Data: The Effect of Transformation on Distributions of Endpoint Data

```{r, large-ctrl-sample-SAplot}
# Time Series for Fluoxetine vehicle control

# Units
unit.t = "2 min"
unit.mov = "cm"
unit.conc = paste0("\U03BC","M")
no.A = 10


# Identify movement columns of interest and extract
t.cols <- grep("vt", names(lmr0.egid), value = TRUE)
cols <- t.cols[(no.A+1):length(t.cols)]
A.cols <- t.cols[!(t.cols%in%cols)]
to.fit <- lmr0.egid[wllt=="v", -A.cols, with=FALSE]

# Melt data and designate Light and Dark time periods
to.fit_melt <- melt(to.fit[,-"egid"], id.vars = names(to.fit)[1:9], variable.name = "t", value.name = "speed")
to.fit_melt[, t := as.factor( gsub("vt","",t) )]
to.fit_melt[t%in%11:30, phase := "Light"]
to.fit_melt[t%in%31:50, phase := "Dark"]

# Create title, x- and y-axis titles, legend labels, and legend title
title.t <- paste0("Time (",unit.t,")")
label.y <- "Speed"
title.mean <- paste0(label.y, " (",unit.mov,"/",unit.t,")")

title.legend <- "Experimental Phase"

## Create x-axis breaks and labels
m <- 50
x.breaks <- c(11, 20, 30, 40, 50)
x.labels1 <- 2*seq(from=no.A,to=m,by=10)
x.labels2 <- x.labels1 - 2
x.labels <- paste(x.labels2, x.labels1, sep="-")

# Printing of graphic isn't working very well so insert new breaks to make space for edges
x.breaks <- c(5, x.breaks, 55)
x.labels <- c("a", x.labels, "b")

## plot
DNT60_VC_Plot <- ggplot(to.fit_melt) +
          geom_boxplot(aes(x=t,y=speed,fill=phase)) +
          scale_x_discrete(breaks = x.breaks, labels = x.labels) +
          scale_fill_manual(values=c("darkgrey","white")) +
          labs(x = title.t, y = title.mean, fill = "Experimental Phase") +
          theme_bw() +
          theme(text = element_text(size = 26))
DNT60_VC_Plot

```



```{r, calculate-speed-data-for-smpl, message = FALSE}
# Raw endpoint data for Fluoxetine vehicle control

sample_endpoints <- data.table::copy(mc0)

sample_endpoints[c("AUC_L","AUC_D","AUC_T")] = NULL
for (i in 1:13) {
  sample_endpoints[[i]][, endp := names(sample_endpoints)[i]]
}

endp.data <- do.call('rbind', sample_endpoints)
max.conc <- max( endp.data[cpid=="Fluoxetine", conc] )

raw_stats <- endp.data[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")][endp == "avgS_L"][, .(mean=mean(rval,na.rm=T),median=median(rval,na.rm=T)), by=.(conc)]
raw_stats_long <- data.table::melt(raw_stats, id.vars = "conc", variable.name = "stat")

FlxAvgS_LPlot <- ggplot(endp.data[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")][endp == "avgS_L"]) +
  geom_density(aes(x=rval, fill=as.factor(conc), color = as.factor(conc)), alpha = 0.5) +
  theme_bw() +
  theme(text = element_text(size = 26)) +
  scale_color_manual(values = colors[c(1,5)]) +
  scale_fill_manual(values = colors[c(1,5)]) +
  labs(color = paste0("Concentration (", unit.conc, ")"),
       fill = paste0("Concentration (", unit.conc, ")"),
       linetype = "",
       x = "Raw Endpoint Value",
       y = "Density")
FlxAvgS_LPlot

FlxAvgS_LPlot <- FlxAvgS_LPlot + 
                  geom_vline(data = raw_stats_l, aes(xintercept=value, linetype=stat), color = colors[c(1,5,1,5)], size=1) +
                  scale_linetype_discrete(labels = c("Mean","Median")) +
                  scale_y_continuous(labels = c("0.0","0.1","0.2","0.3","")) +
                  labs(color = 
                         paste0("Concentration (", unit.conc, ")"),
                       fill = paste0("Concentration (", unit.conc, ")"),
                       linetype = "",
                       x = "Raw Endpoint Value",
                       y = NULL)

legend <- cowplot::get_legend(FlxAvgS_LPlot)

FlxAvgS_LPlot <- FlxAvgS_LPlot + theme(legend.position="none")
FlxAvgS_LPlot
```

```{r, calculate-speed-data-for-smpl_N, message = FALSE}
sample_endpoints_n <- lapply(mc0_n, function(list) {
  table <- list[[1]]
})

sample_endpoints_n[c("AUC_L","AUC_D","AUC_T")] = NULL
for (i in 1:13) {
  sample_endpoints_n[[i]][, endp := names(sample_endpoints_n)[i]]
}

endp.data_n <- do.call('rbind', sample_endpoints_n)

endp.data_n$transform <- "Transformed"
endp.data$transform <- "Non-transformed"

endp.data_all <- rbind(endp.data, endp.data_n)


FlxAvgS_LPlot_n_0 <-ggplot(endp.data_all[wllt=="v",][endp == "avgS_L"]) +
  geom_density(aes(x=rval, fill=as.factor(transform), color = as.factor(transform)), alpha = 0.5) +
  theme_bw() +
  xlim(-2,10)+
  ylim(0,1.8)+
  theme(text = element_text(size = 26)) +
  scale_color_manual(values = colors[c(1,5)]) +
  scale_fill_manual(values = colors[c(1,5)]) +
  labs(color = "",
       fill = "",
       linetype = "",
       x = "Endpoint Value",
       y = NULL)+
  ggtitle("Vehicle controls, AvgS-L")
FlxAvgS_LPlot_n_0
legend <- cowplot::get_legend(FlxAvgS_LPlot_n_0)

FlxAvgS_LPlot_n_0 <- FlxAvgS_LPlot_n_0 + theme(legend.position="none")


FlxAvgS_LPlot_n_max <-ggplot(endp.data_all[conc==max.conc & cpid=="Fluoxetine"][endp == "avgS_L"]) +
  geom_density(aes(x=rval, fill=as.factor(transform), color = as.factor(transform)), alpha = 0.5) +
  theme_bw() +
  xlim(-2,10)+
  ylim(0,1.8)+
  theme(text = element_text(size = 26)) +
  scale_color_manual(values = colors[c(1,5)]) +
  scale_fill_manual(values = colors[c(1,5)]) +
  labs(
    color = "",
    fill = "",
       linetype = "",
       x = "Endpoint Value",
       y = NULL)+
  ggtitle(paste0("Fluoxetine (4uM), AvgS-L"))
FlxAvgS_LPlot_n_max

# FlxAvgS_LPlot_n <- FlxAvgS_LPlot_n + 
#                     geom_vline(data = trans_stats_long, aes(xintercept=value, linetype=stat), color = colors[c(1,5,1,5)], size=1) +
#                     scale_linetype_discrete(labels = c("Mean","Median")) +
#                     labs(color = paste0("Concentration (", unit.conc, ")"),
#                          fill = paste0("Concentration (", unit.conc, ")"),
#                          linetype = "",
#                          x = "Transformed Endpoint Value",
#                          y = NULL)

FlxAvgS_LPlot_n_max <- FlxAvgS_LPlot_n_max + theme(legend.position="none")
```

```{r, plot-Flx-data, fig.dim=c(19,13), message = FALSE}
FlxEndpPlots <- cowplot::plot_grid(FlxAvgS_LPlot_n_0, FlxAvgS_LPlot_n_max,
                   labels = list("B","C"), label_size = 24)
FlxEndpPlots

FlxEndpPlots1 <- cowplot::plot_grid(FlxEndpPlots, legend,
                                    rel_widths = c(5,1))

FlxPlots <- cowplot:::plot_grid(DNT60_VC_Plot, FlxEndpPlots1,
                    labels = list("A"), label_size = 24,
                    ncol = 1)
FlxPlots

ggsave(FlxPlots, file='figures/Figure2_overlay_transform_non_transform_maxfluox_ctrl_nov2023.png',
       width=21,
       height=12)

```
#### Supplemental Figure 2: Fluoxetine Vehicle Control and 4 uM Treatment Group Raw Endpoint Data

```{r, plot-endpoint-data-for-smpl, fig.dim=c(10,10), message = FALSE}
# Raw endpoint data for Fluoxetine vehicle control
raw_stats1 <- endp.data[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")][, .(mean=mean(rval,na.rm=T),median=median(rval,na.rm=T)), by=.(endp,conc)]
raw_stats1_l <- data.table::melt(raw_stats1, id.vars = c("endp","conc"), variable.name = "stat")

raw_plot_facet <- ggplot(endp.data[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")]) +
                    geom_density(aes(x=rval, fill=as.factor(conc), color = as.factor(conc)), alpha = 0.5) +
                    theme_bw() +
                    theme(text = element_text(size = 16)) +
                    facet_wrap(~endp, scales = "free") +
                    scale_color_manual(values = colors[c(1,5)]) +
                    scale_fill_manual(values = colors[c(1,5)])

raw_plot_facet <- raw_plot_facet + 
                    geom_vline(data = raw_stats1_l, aes(xintercept=value, linetype=stat), color = rep(colors[c(1,5)],26), size=1) +
                                scale_linetype_discrete(labels = c("Mean","Median")) +
                                labs(title = "Raw Endpoint Data for Fluoxetine Vehicle Control and High Concentration Group",
                                       color = paste0("Concentration (", unit.conc, ")"),
                                       fill = paste0("Concentration (", unit.conc, ")"),
                                       x = "Raw Endpoint Value",
                                       y = "Density")
raw_plot_facet
```

#### KC NOV 2023: Supplemental Figure 2: Fluoxetine Vehicle Control and 4 uM Treatment Group Raw Endpoint Data

```{r, plot-endpoint-data-for-smpl, fig.dim=c(10,10), message = FALSE}
# Raw endpoint data for Fluoxetine vehicle control
raw_stats1 <- endp.data_all[wllt=="v", .(mean=mean(rval,na.rm=T),median=median(rval,na.rm=T)), by=.(endp,transform)]

raw_stats1_l <- data.table::melt(raw_stats1, id.vars = c("endp","transform"), variable.name = "stat")

endp.data_allx <- endp.data_all[!(wllt=='v' & endp =='AUC_r' & rval > 15) & !endp == 'avgS_L',]

raw_plot_facet <- ggplot(endp.data_allx[wllt=="v"]) +
                    geom_density(aes(x=rval, fill=as.factor(transform), color = as.factor(transform)), alpha = 0.5) +
                    theme_bw() +
                    theme(text = element_text(size = 16)) +
                    facet_wrap(~endp, scales = "free") +
                    scale_color_manual(values = colors[c(1,5)]) +
                    scale_fill_manual(values = colors[c(1,5)])

raw_plot_facet <- raw_plot_facet + 
                    # geom_vline(data = raw_stats1_l, aes(xintercept=value, linetype=stat), color = rep(colors[c(1,5)],26), size=1) +
                                #scale_linetype_discrete(labels = c("Mean","Median")) +
                                labs(
                                  #title = "Box-Cox Power Transformation, All endpoints",
                                       #color = "Data transformation",
                                       #fill = "Data transformation",
                                       x = "Raw Endpoint Value",
                                       y = "Density")
raw_plot_facet


ggsave(raw_plot_facet, file='figures/Supp_Figure1_data_transform_all_end_nov2023.png',
       width=16,
       height=10)

```

#### Supplemental Table 2: Calculate means and variance for raw endpoint data from Fluoxetine vehicle control and stick into table.

```{r, SPT1-means-var-raw}
sample.endp.stats <- endp.data[wllt=="v", .(mean=mean(rval,na.rm=T), variance=stats::var(rval,na.rm=T)), by=.(endp)]
sample.endp.stats[, `:=` (mean = signif(mean,digits=3), variance = signif(variance,digits=3))]
DT::datatable(sample.endp.stats, colnames=c("Endpoint Abbreviation","Mean","Variance"),
              caption = "Raw Endpoint Data Statistics for DNT60 Screening Vehicle Control")

```


#### KC Nov 2023: Supplemental Table 2: Calculate means and variance for raw endpoint data from Fluoxetine vehicle control and stick into table.

```{r, SPT1-means-var-raw}
endp.data[wllt=='v', .N, by=endp]

sample.endp.stats <- endp.data_all[wllt=="v", .(mean=mean(rval,na.rm=T), sd=stats::sd(rval,na.rm=T)), by=.(endp,transform)]
sample.endp.stats[, cv := sd/mean * 100]

sample.endp.stats[, `:=` (mean = signif(mean,digits=3), sd = signif(sd,digits=3), cv = signif(cv, digits=3))]

stats1 <- dcast(sample.endp.stats, endp ~ transform, value.var = "mean" )
setnames(stats1, "Non-transformed","Mean_Non_transformed")
setnames(stats1, "Transformed","Mean_Transformed")

stats2 <- dcast(sample.endp.stats, endp ~ transform, value.var = "sd" )
setnames(stats2, "Non-transformed","SD_Non_transformed")
setnames(stats2, "Transformed","SD_Transformed")

stats3 <- dcast(sample.endp.stats, endp ~ transform, value.var = "cv" )
setnames(stats3, "Non-transformed","CV_Non_transformed")
setnames(stats3, "Transformed","CV_Transformed")

sample.endp.stats <- merge(stats1, stats2, by='endp')
sample.endp.stats <- merge(sample.endp.stats, stats3, by='endp')


DT::datatable(sample.endp.stats, colnames=c("Endpoint","Mean","SD"),
              caption = "Data Transformation")

write.csv(sample.endp.stats, 'output/Data_transformation_stats_veh_contorl_Nov2023.csv')

```


#### Supplemental Figure 3: Fluoxetine Vehicle Control and High Concentration Group Transformed Endpoint Data

```{r, plot-transf-endpoint-data-for-smpl, fig.dim=c(10,10), message = FALSE}
trans_stats1 <- endp.data_n[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")][, .(mean=mean(rval,na.rm=T),median=median(rval,na.rm=T)), by=.(endp,conc)]
trans_stats1_long <- data.table::melt(trans_stats1, id.vars = c("endp","conc"), variable.name = "stat")

trans_plot_facet <- ggplot(endp.data_n[wllt=="v" | (conc==max.conc & cpid=="Fluoxetine")]) +
                      geom_density(aes(x=rval, fill=as.factor(conc), color = as.factor(conc)), alpha = 0.5) +
                      theme_bw() +
                      theme(text = element_text(size = 16)) +
                      facet_wrap(~endp, scales = "free") +
                      scale_color_manual(values = colors[c(1,5)]) +
                      scale_fill_manual(values = colors[c(1,5)])

trans_plot_facet <- trans_plot_facet + 
                      geom_vline(data = trans_stats1_long, aes(xintercept=value, linetype=stat), color = rep(colors[c(1,5)],26), size=1) +
                                scale_linetype_discrete(labels = c("Mean","Median")) +
                                labs(title = "Transformed Endpoint Data for DNT60 Screening Vehicle Control and High Fluoxetine Concentration Group",
                                       color = paste0("Concentration (", unit.conc, ")"),
                                       fill = paste0("Concentration (", unit.conc, ")"),
                                       x = "Raw Endpoint Value",
                                       y = "Density")

trans_plot_facet
```

#### Supplemental Table 3: Calculate means and variance for transformed endpoint data from Fluoxetine vehicle control and stick into table.

```{r, SPT1-means-var-raw}
sample.endp.stats_n <- endp.data_n[wllt=="v", .(mean=mean(rval,na.rm=T), variance=stats::var(rval,na.rm=T)), by=.(endp)]
sample.endp.stats_n[, `:=` (mean = signif(mean,digits=3), variance = signif(variance,digits=3))]
DT::datatable(sample.endp.stats_n, colnames=c("Endpoint Abbreviation","Mean","Variance"),
              caption = "Transformed Endpoint Data Statistics for DNT60 Screening Vehicle Control")
```

#### Supplemental Table 4: Box-Cox power transformation parameters.

```{r, Box-Cox Parameters}
bxcx.params <- lapply(mc0_n, function(data) {
  as.data.table( data[c(2,3)] )
})

bxcx.params.dt <- do.call('rbind', bxcx.params)
bxcx.params.dt[, endp := names(bxcx.params)]

datatable(bxcx.params.dt[, .(endp,lam.hat,shift)], colnames=c("Endpoint Abbreviation","Lambda","Shift"),
              caption = "Box-Cox Power Transformation Parameters for Endpoints")
```


### Applying tcplFit2

How many chemical-endpoint pair were active? How many chemicals had at least one active endpoint?

```{r, active-chemicals-endpoints}
# Endpoints to exclude
exclude <- c("AUC_L","AUC_D","AUC_T")

# Number of active chemical-endpoint pairs
tcpl_out.dt[hitcall>0.8 & !endp%in%exclude, .N]

# Number of active chemicals
length( tcpl_out.dt[hitcall>0.8 & !endp%in%exclude, unique(name)] )
```

Evaluating popular fits.

```{r, evaluating-popular-fits}
# Popular fits for all endpoint data
tcpl_out.dt[!endp%in%exclude, .N, by = .(fit_method)]

# Popular fits for active curve-fits
tcpl_out.dt[!endp%in%exclude & hitcall>0.8, .N, by = .(fit_method)]
```

Evaluate the the occurrence of developmental toxicity for chemicals fit optimally by the poly1 function.

```{r, evaluate-hits-with-poly1}
# Isolate chemicals with active endpoints optimally fitted by poly1
chemicals <- tcpl_out.dt[hitcall>0.8 & fit_method=="poly1" & !endp%in%c("AUC_L","AUC_D","AUC_T"), unique(name)]

# Is developmental toxicity associated with these chemicals?
litReviewConc[, dev_LOEL := min(.SD[devtox==1,conc]), by=.(cpid)]
litReviewConc[is.infinite(dev_LOEL), dev_LOEL := NA]
litReviewConc[cpid%in%chemicals, .(dev_LOEL = unique(dev_LOEL)), by = .(cpid)]
```

### Activity in Terms of Endpoints

#### Supplemental Table 5: Number of chemicals active in each endpoint.

```{r, number-of-chemicals-active}
count.hits.endp <- tcpl_out.dt[hitcall>0.8 & !endp%in%exclude, unique(name), by = .(endp)][, .N, by = .(endp)]

datatable(count.hits.endp[order(-N)], colnames=c("Endpoint Abbreviation","Number of Active Chemicals"), caption = "Number of Chemicals Active in Each Endpoint",
          rownames = FALSE)
```


#### KC: Activity Summary table and top_over_cutoff plots

```{r, active-chemicals-table}
exclude <- c('AUC_L','AUC_D','AUC_T')

# binary hitcall
mc5 <- tcpl_out.dt[!endp %in% exclude,]
mc5[ , hitc := ifelse(hitcall>0.8, 1, 0)]
mc5[hitc==0, bmd := NA]
mc5[hitc==0, top_over_cutoff := NA]

# summary table by aenm
mc5.sum.endp <- mc5[, list(
  hitsum = sum(hitc),
  bmd.med = median(bmd, na.rm=T),
  bmd.mean = mean(bmd, na.rm=T),
  bmd.sd = sd(bmd, na.rm=T)),
  # toc.mean = mean(top_over_cutoff, na.rm=T),
  # toc.sd = sd(top_over_cutoff, na.rm=T)),
  by= endp][order(-hitsum)]

cols <- c('bmd.mean','bmd.sd','bmd.med')
mc5.sum.endp[,(cols) := round(.SD,3), .SDcols=cols]
write.csv(mc5.sum.endp, 'output/Endp_tbl_summary_stat_23Nov23.csv')

# summary table by chemical
mc5.sum <- mc5[, list(
  hitsum = sum(hitc),
  bmd.min = min(bmd, na.rm=T),
  bmd.med = median(bmd, na.rm=T),
  bmd.mean = mean(bmd, na.rm=T),
  bmd.sd = sd(bmd, na.rm=T),
  toc.mean = mean(top_over_cutoff, na.rm=T),
  toc.sd = sd(top_over_cutoff, na.rm=T)),
  by= name]

cols <- c('bmd.min','bmd.med','bmd.mean','bmd.sd','toc.mean','toc.sd')
mc5.sum[,(cols) := round(.SD,2), .SDcols=cols]

max.conc.tbl <- endp.data[, list(max.conc = max(conc)), by=cpid]
mc5.sum$max.conc <- max.conc.tbl$max.conc[match(mc5.sum$name, max.conc.tbl$cpid)]
write.csv(mc5.sum, 'output/Chem_tbl_summary_stat.csv') # table 4

active.hits <- mc5[hitc==1]
nrow(active.hits)
nrow(mc5[top_over_cutoff <1.5,])

high.eff <- active.hits[top_over_cutoff>1.5,]
unique(high.eff$name)

# mean efficacy by endpoint
mc5.eff.sum <- mc5[, list(toc.mean.end = mean(top_over_cutoff, na.rm=T),
                          top.sd.end = sd(top_over_cutoff, na.rm=T)), by=endp]



ggplot(mc5, aes(x=top_over_cutoff, y=as.factor(endp)))+
  geom_point()+
  geom_boxplot()

# regression plot max conc tested
mc5$max.conc <- max.conc.tbl$max.conc[match(mc5$name, max.conc.tbl$cpid)]
mc5[, hitsum := sum(hitc), by=name]

library(ggpubr)
library(ggplot2)
library(ggpmisc)

p1 <- ggscatter(
  mc5, y = "top_over_cutoff" , x = "max.conc",
  #color = variable, palette = "blues",
  add = "reg.line"
  ) +
  # stat_cor(label.y=3.0,
  #          aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))) +
  # stat_regline_equation(label.y=2.9)+
  stat_cor(label.y = 3.0) +
  stat_regline_equation(label.y = 2.9)+
  labs(title="Effect size versus maximum concentration tested", 
         x="Maximum Concentration (uM)")
  #y = expression(paste("Mean AC50 (log10 ",mu,"M)")))+
  # ylim(c(-2,3))

p1

lm1 <- lm(max.conc~top_over_cutoff, data = mc5)
summary(lm1)

p2 <- ggscatter(
  mc5[!hitsum==0,], y = "top_over_cutoff" , x = "hitsum",
  #color = "name",
  add = "reg.line"
  ) +
  # stat_cor(label.y=3.0,
  #          aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))) +
  # stat_regline_equation(label.y=2.9)+
    stat_cor(label.y = 3.0) +
  stat_regline_equation(label.y = 2.9)+
  labs(title="Effect size versus hit rate by chemical", 
         x="Hit Rate by chemical")

  #y = expression(paste("Mean AC50 (log10 ",mu,"M)")))+
  # ylim(c(-2,3))
p2
lm2 <- lm(hitsum~top_over_cutoff, data = mc5)
summary(lm2)


p.all <- cowplot:::plot_grid(p1, p2,
                    labels = "AUTO", label_size = 24,
                    ncol = 2)
ggsave(p.all, file='figures/Cowplot_regression_top_over_cutoff.tiff',
       width=11, height=5, dpi=300)

# histogram plot of the top over cutoff for hits
end.common <- c('avgS_T','avgS_D','avgS_L','AUC_r')
mc5$end.cat <- "Expanded"
mc5[endp %in% end.common, end.cat := "Commonly studied"]
unique(mc5$end.cat)

test <- mc5[hitc==1, c('name','endp','end.cat','top_over_cutoff')]

p3 <- ggplot(mc5[hitc==1], aes(x=top_over_cutoff, color=end.cat, fill=end.cat))+
  geom_histogram(alpha=0.5, position="identity")+
  scale_color_grey()+scale_fill_grey() +
  theme_classic()+
  ggtitle("Distribution of 'top_over_cutoff' values")
p3

mc5[hitc==1, median.toc := median(top_over_cutoff), by=endp]


p4 <- ggplot(mc5[hitc==1], aes(x=top_over_cutoff, y=reorder(endp, median.toc), fill=end.cat))+
  geom_boxplot(alpha=0.5)+
  geom_point()+
  #scale_fill_grey()+
    scale_fill_discrete(name="Endpoint Category")+
  ylab("")+
  theme_classic()+
  ggtitle("Boxplot of 'top_over_cutoff' values by endpoint")+
    theme(
    legend.position = c(.8, .2)
    )+
  theme(text= element_text(size=14))

p4

mc5[hitc==1, median.toc.chem := median(top_over_cutoff), by=name]

mc5.temp <- mc5[name %in% 'Polybrominated diphenyl ether (PBDE)-47', name := 'PBDE-47']
p5 <- ggplot(mc5.temp[hitc==1], aes(x=top_over_cutoff, y=reorder(name, median.toc.chem)))+
  geom_boxplot(alpha=0.5)+
  geom_point(aes(color=end.cat), size=3)+
  guides(fill = "none")+
  #scale_color_grey(guide="none")+
  scale_color_discrete(name="Endpoint Category")+
  ylab("")+
  theme_classic()+
  ggtitle("Boxplot of 'top_over_cutoff' values by chemical")+
  theme(
    legend.position = c(.8, .2)
    )+
  theme(text= element_text(size=14))

p5

# compare top over cutoff to other assay endpoints
library(tcpl)
tcplConf(user='_dataminer', pass='pass', #insert user and pass
         db='prod_internal_invitrodb_v4_1', drvr='MySQL', 
         host='ccte-mysql-res.epa.gov') #insert host

# Load mc data
mean(mc5[hitc==1, top_over_cutoff])
sd(mc5[hitc==1, top_over_cutoff])

neuro.asids <- c(20,31)
neuro.assays <- tcplLoadAeid(val=neuro.asids, fld='asid',add.fld='acid')
neuro.assays <- neuro.assays[!grep("acute",aenm),]
#mc5.neuro <- tcplPrepOtpt(tcplLoadData(lvl=5,type='mc', fld='aeid',val=neuro.assays$aeid, add.fld=T))
#save(mc5.neuro, file= 'output/ToxCast_dnt_end_mc5_invitrodb_4_1_22Nov23.Rdata')
load('output/ToxCast_dnt_end_mc5_invitrodb_4_1_22Nov23.Rdata')
# chems.match <- as.data.table(unique(mc5$name))
# chems.match$chnm <- mc5.neuro$chnm[match(chems.match$V1, mc5.neuro$chnm)]
library(openxlsx)
#write.xlsx(chems.match, 'output/Map_chems_to_chnm_kelly_22Nov23.xlsx')
chems.match2 <- as.data.table(read.xlsx('output/Map_chems_to_chnm_kelly_22Nov23_edit.xlsx'))
chems.match2$chnm2 <- mc5.neuro$chnm[match(chems.match2$chnm, mc5.neuro$chnm)]

mc5.sub <- mc5.neuro[chnm %in% chems.match2$chnm,]
mc5.sub <- mc5.sub[!is.na(chnm),]
mc5.sub[,  hitc2 := ifelse(hitc>=0.9,1,0)]

mean(mc5.sub[hitc==1, top_over_cutoff])
sd(mc5.sub[hitc==1, top_over_cutoff])
quantile(mc5.sub[hitc==1, top_over_cutoff], 0.95)

mc5.sub$assay <- "Other DNT assays"
mc5$assay <- "Zebrafish assay"
mc5.hist1 <- mc5[, c('name','endp','hitc','top_over_cutoff','assay')]
setnames(mc5.hist1, "name","chnm")
setnames(mc5.hist1, "endp","aenm")
mc5.hist2 <- mc5.sub[, c('chnm','aenm','hitc2','top_over_cutoff','assay')]
setnames(mc5.hist2, "hitc2","hitc")

df.hist <- rbind(mc5.hist1, mc5.hist2)

p6 <- ggplot(df.hist[hitc==1 & top_over_cutoff < 15], aes(x=top_over_cutoff, color=assay, fill=assay))+
  geom_density(alpha=0.38, position="identity")+
  #scale_color_grey()+scale_fill_grey() +
  theme_classic()+
  ggtitle("Distribution of 'top_over_cutoff' values")+
    theme(
    legend.position = c(.8, .2)
    )+
  theme(text= element_text(size=14))

p6

# p3 <- ggplot(mc5[hitc==1 & end.cat %in% "Expanded"], aes(x=top_over_cutoff))+
#   geom_histogram(bins=20, col="white")+
#   theme_bw()+
#   xlim(1,2.5)+
#   ggtitle("Distribution of 'top_over_cutoff' values for 'expanded' endpoints")
# p3
# 
# p4 <- ggplot(mc5[hitc==1 & end.cat %in% "Commonly studied"], aes(x=top_over_cutoff))+
#   geom_histogram(bins=20, col="white")+
#   theme_bw()+
#   xlim(1,2.5)+
#   ggtitle("Distribution of 'top_over_cutoff' values for 'commonly studied' endpoints")
# p4

# ggsave(p3, file='figures/Histo_top_over_cutoff_21Nov2023.tiff',
#        width=6, height=3, dpi=300)

p.all <- cowplot:::plot_grid(p4, p5, p6,
                    labels = "AUTO", label_size = 20,
                    ncol = 3)
ggsave(p.all, file='figures/Cowplot_top_over_cutoff_histos.tiff',
       width=20, height=7, dpi=300)

p.all <- cowplot:::plot_grid(p4, p5, p6,
                    labels = "AUTO", label_size = 20,
                    ncol = 1)
ggsave(p.all, file='figures/Cowplot_top_over_cutoff_histos_long.tiff',
       width=11, height=16, dpi=300)

# correlation plots
p.all <- cowplot:::plot_grid(p1, p2,
                    labels = "AUTO", label_size = 20,
                    ncol = 2)
# ggsave(p.all, file='figures/Cowplot_regression_top_over_cutoff.tiff',
#        width=11, height=5, dpi=300)

# multiple linear regression model
# which variables most explains effect size (top_over_cutoff)
# variables: max conc tested, total hits, endp, binary endp (common/ not common), model, bmd
mc5[, modl := fit_method]

model <- lm(top_over_cutoff ~ max.conc + hitsum  +end.cat + modl + bmd, data = mc5[hitc==1])
summary(model)

library(broom)
tidy_lmfit <- tidy(model)
tidy_lmfit


```


#### KC: BMC comparisons

```{r, active-chemicals-table}


p1 <- ggscatter(
  mc5, y = "bmd" , x = "max.conc",
  #color = variable, palette = "blues",
  add = "reg.line"
  ) +
  # stat_cor(label.y=3.0,
  #          aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))) +
  # stat_regline_equation(label.y=2.9)+
  stat_cor(label.y = 90) +
  stat_regline_equation(label.y = 85)+
  labs(title="Effect size versus maximum concentration tested", 
         x="Maximum Concentration (uM)")
  #y = expression(paste("Mean AC50 (log10 ",mu,"M)")))+
  # ylim(c(-2,3))

p1

lm1 <- lm(max.conc~bmd, data = mc5)
summary(lm1)

p2 <- ggscatter(
  mc5[!hitsum==0,], y = "bmd" , x = "hitsum",
  #color = "name",
  add = "reg.line"
  ) +
  # stat_cor(label.y=3.0,
  #          aes(label = paste(..rr.label.., ..p.label.., sep = "~`,`~"))) +
  # stat_regline_equation(label.y=2.9)+
    stat_cor(label.y = 90) +
  stat_regline_equation(label.y = 85)+
  labs(title="Effect size versus hit rate by chemical", 
         x="Hit Rate by chemical")

  #y = expression(paste("Mean AC50 (log10 ",mu,"M)")))+
  # ylim(c(-2,3))
p2

lm2 <- lm(hitsum~bmd, data = mc5)
summary(lm2)


# p.all <- cowplot:::plot_grid(p1, p2,
#                     labels = "AUTO", label_size = 24,
#                     ncol = 2)
# ggsave(p.all, file='figures/Cowplot_regression_bmd.tiff',
#        width=11, height=5, dpi=300)

# histogram plot of the top over cutoff for hits

test <- mc5[hitc==1, c('name','endp','end.cat','bmd')]

p3 <- ggplot(mc5[hitc==1], aes(x=bmd, color=end.cat, fill=end.cat))+
  geom_histogram(alpha=0.5, position="identity")+
  scale_color_grey()+scale_fill_grey() +
  theme_classic()+
  ggtitle("Distribution of 'bmd' values")
p3

mc5[hitc==1, median.bmd := median(bmd), by=endp]


p4 <- ggplot(mc5[hitc==1], aes(x=log10(bmd), y=reorder(endp, median.bmd), fill=end.cat))+
  geom_boxplot(alpha=0.5)+
  geom_point()+
  #scale_fill_grey()+
    scale_fill_discrete(name="Endpoint Category")+
  ylab("")+
  xlab("BMC (log10-uM)")+
  theme_classic()+
  ggtitle("Boxplot of BMC values by endpoint")+
    theme(
    legend.position = c(.8, .2)
    )+
  theme(text= element_text(size=14))

p4

mc5[hitc==1, median.bmd.chem := median(bmd), by=name]

mc5.temp <- mc5[name %in% 'Polybrominated diphenyl ether (PBDE)-47', name := 'PBDE-47']
p5 <- ggplot(mc5.temp[hitc==1], aes(x=log10(bmd), y=reorder(name, median.bmd.chem)))+
  geom_boxplot(alpha=0.5)+
  geom_point(aes(color=end.cat), size=3)+
  guides(fill = "none")+
  #scale_color_grey(guide="none")+
  scale_color_discrete(name="Endpoint Category")+
  ylab("")+
  xlab("BMC (log10-uM)")+
  theme_classic()+
  ggtitle("Boxplot of BMC values by chemical")+
  theme(
    legend.position = c(.8, .2)
    )+
  theme(text= element_text(size=14))

p5

# compare bmc to other assay endpoints

mc5.sub[hitc2==0, bmd := NA]
mean(mc5.sub[hitc2==1, bmd,], na.rm=T)
sd(mc5.sub[hitc2==1, bmd], na.rm=T)
quantile(mc5.sub[hitc2==1, bmd], 0.95, na.rm=T)

mc5.sub$assay <- "Other DNT assays"
mc5$assay <- "Zebrafish assay"
mc5.hist1 <- mc5[, c('name','endp','hitc','bmd','assay')]
setnames(mc5.hist1, "name","chnm")
setnames(mc5.hist1, "endp","aenm")
mc5.hist2 <- mc5.sub[, c('chnm','aenm','hitc2','bmd','assay')]
setnames(mc5.hist2, "hitc2","hitc")

df.hist <- rbind(mc5.hist1, mc5.hist2)

p6 <- ggplot(df.hist[hitc==1 & bmd <100], aes(x=log10(bmd), color=assay, fill=assay))+
  geom_density(alpha=0.38, position="identity")+
  #scale_color_grey()+scale_fill_grey() +
  theme_classic()+
  ggtitle("Distribution of 'bmd' values")+
    theme(
    legend.position = c(.8, .2)
    )+
  theme(text= element_text(size=14))

p6


# p.all <- cowplot:::plot_grid(p4, p5, p6,
#                     labels = "AUTO", label_size = 20,
#                     ncol = 3)
# ggsave(p.all, file='figures/Cowplot_bmd_histos.tiff',
#        width=20, height=7, dpi=300)

p.all <- cowplot:::plot_grid(p4, p5, p6,
                    labels = "AUTO", label_size = 20,
                    ncol = 1)
ggsave(p.all, file='figures/Cowplot_bmd_histos_long.tiff',
       width=11, height=16, dpi=300)

p.all <- cowplot:::plot_grid(p4, p5,
                    labels = "AUTO", label_size = 20,
                    ncol = 1)
ggsave(p.all, file='figures/Cowplot_bmd_histos_long2.tiff',
       width=11, height=10, dpi=300)

# correlation plots
p.all <- cowplot:::plot_grid(p1, p2,
                    labels = "AUTO", label_size = 20,
                    ncol = 2)
# ggsave(p.all, file='figures/Cowplot_regression_bmd.tiff',
#        width=11, height=5, dpi=300)

# multiple linear regression model
# which variables most explains effect size (bmd)
# variables: max conc tested, total hits, endp, binary endp (common/ not common), model, bmd
mc5[, modl := fit_method]

model <- lm(bmd ~ max.conc + hitsum  +end.cat + modl + top_over_cutoff, data = mc5[hitc==1])
summary(model)

library(broom)
tidy_lmfit <- tidy(model)
tidy_lmfit


```
#### KC edit Figure 3: Count of Active Chemicals by Phase and Endpoint Category

```{r, active-by-category-phase, fig.dim=c(20,10)}

# map in new activity type categories as of 23 Nov 2023
endp.out <- data.frame(unique(mc5[, c('endp','end.cat')]))
#write.csv(endp.out, 'output/Endpoint_tbl_list.csv')
endp.in <- as.data.table(read.csv('output/Endpoint_tbl_list_edit_in_23Nov23.csv'))
endp.in$X <- NULL
mc5 <- merge(mc5, endp.in, by=c('endp'))
unique(mc5[, c('endp','Activity.Type','Experimental.Phase')])

hits1 <- mc5[hitc==1,]

hits1$Activity.Type <- factor(hits1$Activity.Type, levels=c( 'Range of Activity', 'Habituation','Startle Response','Average Speed'))

p1 <- ggplot(hits1, aes(x=Activity.Type))+
  geom_bar(width=0.8, fill='darkgrey',color="black")+
  stat_count(geom = "text", colour = "black", size = 5,
              aes(label = paste(..count..,"57",sep="/")), vjust=-0.5)+
  theme_bw()+
    labs(title="Activity Type",
         y="Hits", x=NULL)+
      theme(text= element_text(size=18))+
    theme(plot.title=element_text(size=16))

p1 

hits1$Experimental.Phase <- factor(hits1$Experimental.Phase, levels=c('Light','Dark','Both'))


p2 <- ggplot(hits1, aes(x=Experimental.Phase))+
  geom_bar(width=0.8, fill='darkgrey',color="black")+
  stat_count(geom = "text", colour = "black", size = 5,
              aes(label = paste(..count..,"57",sep="/")), vjust=-0.5)+
  theme_bw()+
  labs(title="Experimental Phase",
       y="Hits", x=NULL)+
        theme(text= element_text(size=18))+
  theme(plot.title=element_text(size=16))
p2

p.all <- cowplot:::plot_grid(p1, p2,
                    labels = "AUTO", label_size = 20,
                    ncol = 2)
ggsave(p.all, file='figures/Cowplot_hits_by_endp_type.tiff',
       width=11, height=3.5, dpi=300)

#---------------------------------------------------------------------------#
#KC: Try using the complex upset plot
#---------------------------------------------------------------------------#
# setup data table
hits1 <- unique(mc5[hitc==1,c('name','Activity.Type')])
hits1$hit <- 1
dat2 <- dcast(hits1, name ~ Activity.Type, value.var = "hit")
dat2$name <- NULL

library(ComplexUpset)
pipes <- colnames(dat2)
nrow(dat2)

plot1 <- upset(data = dat2, intersect = pipes, 
              name= "Concordance by Activity Type", 
              min_size = 0,
              width_ratio = 0.125, 
              set_sizes=(
        upset_set_size(round())
        + theme(axis.text.x=element_text(angle=90))
    ))
plot1

#save to file
file.dir <- paste("./figures/", sep="")
file.name <- paste("/fig_upset_plot_activity_type", Sys.Date(), ".png", sep="")
file.path <- paste(file.dir, file.name, sep="")
dir.create(path=file.dir, showWarnings = FALSE, recursive = TRUE)
png(file.path,
    width = 11,
    height = 4.8, #change from 8 to 20
    units = "in",
    res = 300)
plot1
dev.off()
################################

# hits1 <- unique(mc5[hitc==1,c('name','Activity.Type')])
# hits1$Activity.Type <- as.factor(hits1$Activity.Type)

# endp.lists <- split(hits1[,Activity.Type], hits1[,name])
# to.plot <- data.table(name = names(endp.lists), list = endp.lists)
# library(ggupset)
# p3 <- ggplot(to.plot, aes(x=list)) +
#           geom_bar(fill='darkgrey',color="black",width=0.8) +
#           theme_bw() +
#           labs(x=NULL,
#                y = NULL,
#                title = "Activity Type"
#                ) +
#           theme(text = element_text(size=15),
#                  axis.title.x = element_text(size=18),
#                  axis.title.y = element_text(size=18)) +
#           ggupset::scale_x_upset(reverse = T) +
#           theme_combmatrix(combmatrix.label.text = element_text(size=18),
#                            combmatrix.panel.point.size = 5)
# p3

#---------------------------------------------------------------------------#
#KC: Try using the complex upset plot; experimental phase
#---------------------------------------------------------------------------#
# setup data table
hits1 <- unique(mc5[hitc==1,c('name','Experimental.Phase')])
hits1$hit <- 1
dat2 <- dcast(hits1, name ~ Experimental.Phase, value.var = "hit")
dat2$name <- NULL

library(ComplexUpset)
pipes <- colnames(dat2)
nrow(dat2)
plot2 <- upset(data = dat2, intersect = pipes, 
              name= "Concordance by Experimental Phase", 
              min_size = 0,
              width_ratio = 0.125,
              set_sizes=(
        upset_set_size()
        + theme(axis.text.x=element_text(angle=90))
    ))
plot2

#save to file
file.dir <- paste("./figures/", sep="")
file.name <- paste("/fig_upset_plot_experimental_phase", Sys.Date(), ".png", sep="")
file.path <- paste(file.dir, file.name, sep="")
dir.create(path=file.dir, showWarnings = FALSE, recursive = TRUE)
png(file.path,
    width = 11,
    height = 4.8, #change from 8 to 20
    units = "in",
    res = 300)
plot2
dev.off()

# hits1 <- unique(mc5[hitc==1,c('name','Experimental.Phase')])
# hits1$Experimental.Phase <- as.factor(hits1$Experimental.Phase)
# 
# phase.lists <- split(factor(hits1[,Experimental.Phase]), hits1[,name])
# to.plot1 <- data.table(name = names(phase.lists), list = phase.lists)
# 
# p4 <- ggplot(to.plot1, aes(x=list)) +
#           geom_bar(fill='darkgrey',color="black",width=0.8) +
#           theme_bw() +
#           labs(x=NULL,
#                y = NULL,
#                title = "Experimental Phase"
#                ) + 
#          theme(text = element_text(size=14),
#                axis.title.x = element_text(size=18),
#                axis.title.y = element_text(size=18)) +
#         ggupset::scale_x_upset(reverse = T) +
#         theme_combmatrix(combmatrix.label.text = element_text(size=18),
#                          combmatrix.panel.point.size = 5)
# 
# p4

# p.all <- cowplot::plot_grid(p1, p2, p3, p4, scale=0.95,rel_widths = c(9,7),
#                    labels = "AUTO", label_size = 20)
# 
# ggsave(p.all, file='figures/Cowplot_upset_hits_by_endp_type.tiff',
#        width=15, height=12, dpi=300)

p.all <- cowplot::plot_grid(plot1, plot2, scale=0.95,
                            rel_widths = c(9,7),
                   labels = "AUTO", label_size = 20)

ggsave(p.all, file='figures/Cowplot_upset_plot_A_B.tiff',
       width=12, height=5, dpi=300)

```      
#### Figure 3: Count of Active Chemicals by Phase and Endpoint Category

```{r, active-by-category-phase, fig.dim=c(20,10)}
tcpl_out.actives <- tcpl_out.dt[hitcall>0.8 & !endp%in%c("AUC_L","AUC_D","AUC_T","AUC_r")]

tcpl_out.actives[endp%in%c("avgS_L","avgS_D","avgS_T"), cat1 := "Average Speed"]
tcpl_out.actives[endp%in%c("hbt1_L","hbt1_D","hbt2_L","hbt2_D"), cat1 := "Habituation"]
tcpl_out.actives[endp%in%c("RoA_L","RoA_D"), cat1 := "Range of Activity"]
tcpl_out.actives[endp%in%c("strtlA","strtlAavg","strtlF"), cat1 := "Startle Response"]

tcpl_out.actives[endp%in%c("avgS_L","hbt1_L","hbt2_L","RoA_L"), cat2 := "Light"]
tcpl_out.actives[endp%in%c("avgS_D","hbt1_D","hbt2_D","RoA_D"), cat2 := "Dark"]
tcpl_out.actives[endp%in%c("strtlA","strtlAavg","strtlF"), cat2 := "Transition"]
tcpl_out.actives[endp%in%c("avgS_T"), cat2 := "Total"]

actv.chem.cat1 <- tcpl_out.actives[, .(cat1 = factor(unique(cat1),levels=c("Average Speed","Habituation",
                                                                           "Range of Activity","Startle Response"))),
                                   by=.(name)]
actv.chem.cat2 <- tcpl_out.actives[, .(cat2 = factor(unique(cat2),levels=c("Light","Transition","Dark","Total"))),
                                   by=.(name)]

activesCatCntPlot <- ggplot(actv.chem.cat1, aes(x=cat1, color=cat1, fill=cat1)) +
                      geom_bar() +
                      stat_count(geom = "text", colour = "black", size = 8.5,
                                 aes(label = paste(..count..,"22",sep="/")), position=position_stack(vjust=1.05)) +
                      theme_bw() +
                      theme(text = element_text(size=20)) + 
                      labs(x="Endpoint Categories",
                           y="Number of Chemicals Active in Category",
                           color="Endpoint Category",
                           fill="Endpoint Category") +
                      scale_y_continuous(breaks=c(2,4,6,8,10)) +
                      scale_x_discrete(labels=c("Average Speed","Habituation","Range of Activity","Startle Response")) +
                      scale_color_manual(values=viridis::viridis(4),
                                         labels=c("Average Speed","Habituation","Range of Activity","Startle Response")) +
                      scale_fill_manual(values=viridis::viridis(4),
                                        labels=c("Average Speed","Habituation","Range of Activity","Startle Response"))


activesPhsCntPlot <- ggplot(actv.chem.cat2, aes(x=cat2, color=cat2, fill=cat2)) +
                            geom_bar() +
  stat_count(geom = "text", colour = "black", size = 8.5,
             aes(label = paste(..count..,"22",sep="/")), position=position_stack(vjust=1.05)) +
                            theme_bw() +
                            theme(text = element_text(size=20)) + 
                            labs(x="Experimental Phase",
                                 y="Number of Chemicals Active in Phase",
                                 color="Experimental Phase",
                                 fill="Experimental Phase") +
                                 scale_y_continuous(breaks=c(2,4,6,8,10,12)) +
                                 scale_color_manual(values=viridis::viridis(4)) +
                                 scale_fill_manual(values=viridis::viridis(4))

cowplot:::plot_grid(activesCatCntPlot, activesPhsCntPlot,
                    labels = "AUTO", label_size = 24,
                    ncol = 2)
```

#### Supplemental Figure 4: Combinations of Endpoint Category and Experimental Phase Activity

```{r, combo-plots, fig.dim=c(13,10)}
endp.lists <- split(actv.chem.cat1[,cat1], actv.chem.cat1[,name])
to.plot <- data.table(name = names(endp.lists), list = endp.lists)

phase.lists <- split(actv.chem.cat2[,cat2], actv.chem.cat2[,name])
to.plot1 <- data.table(name = names(phase.lists), list = phase.lists)

plot <- ggplot(to.plot, aes(x=list)) +
          geom_bar() +
          theme_bw() +
          labs(x = "Endpoint Category Combinations",
               y = "Number of Chemicals with Combination",
               title = "Combinations of Endpoint\nActivity by Endpoint Category") +
          theme(text = element_text(size=20),
                 axis.title.x = element_text(size=18),
                 axis.title.y = element_text(size=18)) +
          ggupset::scale_x_upset(reverse = TRUE) +
          theme_combmatrix(combmatrix.label.text = element_text(size=18),
                           combmatrix.panel.point.size = 5)

plot1 <- ggplot(to.plot1, aes(x=list)) +
          geom_bar() +
          theme_bw() +
          labs(x = "Experimental Phase Combinations",
               y = NULL,
               title = "Combinations of Endpoint\nActivity by Experimental Phase") + 
         theme(text = element_text(size=20),
               axis.title.x = element_text(size=18),
               axis.title.y = element_text(size=18)) +
        ggupset::scale_x_upset(reverse = TRUE) +
        theme_combmatrix(combmatrix.label.text = element_text(size=18),
                         combmatrix.panel.point.size = 5)

cowplot::plot_grid(plot, plot1, rel_widths = c(9,8),
                   labels = "AUTO", label_size = 24)
```

Directionality of endpoint activity was taken from BMC heatmap which will be presented in BMC section

### Results in Terms of Chemicals

Chemicals that were active in endpoints other than Average Speed endpoints.

```{r, chms-actve-no-avgS}
active.avgS <- tcpl_out.dt[hitcall>0.8 & endp%in%c("AUC_L","AUC_D","AUC_T"), unique(name)]
tcpl_out.dt[hitcall>0.8 & !name%in%active.avgS & !endp%in%exclude, unique(name)]
```

Linear Regression of Chlorpyrifos Average Speed in Dark

```{r, cpf_avgS_LR}
cpf_row <- rows_n[["Chlorpyrifos"]][["avgS_D"]]

cpf_dt <- data.frame(conc = c(cpf_row$conc,rep(0,length(cpf_row$bresp))),
                     resp = c(cpf_row$resp,cpf_row$bresp))
cpf_dt$conc = cpf_dt$conc - mean(cpf_dt$conc)

# Regress responses with a linear model
cpf_lm <- lm(resp ~ conc, data = cpf_dt)
confint(cpf_lm)
```


#### Figure 4: Behavior profiles of Chlorpyrifos with active endpoints.

```{r, CPF-SA-timeSeries}
chemical <- "Chlorpyrifos"

# Units
unit.t = "min"
unit.mov = "cm"
unit.conc = paste0("\U03BC","M")
prsp = "SA"
no.A = 10

# Extract chemical data
group <- unique(lmr0.egid[cpid == chemical, egid])

## Identify movement columns of interest
t.cols <- grep("vt", names(lmr0.egid), value = TRUE)
cols <- t.cols[(no.A+1):length(t.cols)]
A.cols <- t.cols[!(t.cols%in%cols)]

## extract data to be plotted, exclude acclimation
to.fit <- lmr0.egid[cpid==chemical | (wllt=="v" & egid==group), -A.cols, with=FALSE]

# create appropriate axes titles for plots
label.y <- "Speed"

# Format data for plotting

## calculate mean and 50% CIs for each vector column by concentration group, excluding concentration
exclude.A <- t.cols[!(t.cols%in%A.cols)]
means <- to.fit[, lapply(.SD, function(col) mean(col,na.rm=T)),
                .SDcols = exclude.A,
                by = conc]

## calculate CI's for transformed values then transform back
shift <- 1
logCIs <- to.fit[, lapply(.SD, function(x) log10(x+shift)), .SDcols=exclude.A, by=conc][
  , lapply(.SD, function(x) t.test(x,conf.level=0.50)$conf.int), .SDcols=exclude.A, by=conc]
CIs <- logCIs[, lapply(.SD, function(x) (10^x)-shift), by=conc][,lapply(.SD, function(col) abs(diff(col))/2), .SDcols=exclude.A, by=conc]

## elongate means and CIs data, and join
means_long <- data.table::melt(means, id.vars = "conc", variable.name = "t", value.name = "mean")
means_long[, t := sub("vt","",t)]
CIs_long <- data.table::melt(CIs, id.vars = "conc", variable.name = "t", value.name = "CI")
CIs_long[, t := sub("vt","",t)]
stats <- means_long[CIs_long, on = c("conc","t")][, conc := as.factor(conc)]
stats[, t := as.numeric(t)]

# create standard error of mean estimates by time period and plot as ribbons or error bars

# plot time-series data

## create title, x- and y-axis titles, legend labels, and legend title
title <- paste0("Sample Averaged Time-Series for ", chemical)
title.t <- paste0("Time (",unit.t,")")
title.mean <- paste0("Mean ", label.y, " (",unit.mov,"/",unit.t,")")
conc.n <- to.fit[wllq==1, .N, by=.(conc)][order(conc)]
legend.labels <- paste0(conc.n$conc, ", n=", conc.n$N)

title.legend <- paste0("Concentration (", unit.conc, ")")

## get better colors for plotting
N <- length(unique(to.fit[,conc]))
colors <- viridis::viridis(N)

## create x-axis breaks and labels
m <- as.integer(max(means_long[,t]))
x.breaks <- seq(from=no.A,to=m,by=10)
x.labels1 <- 2*seq(from=no.A,to=m,by=10)
x.labels2 <- x.labels1 - 2
x.labels <- paste(x.labels2, x.labels1, sep="-")

## plot
SAplot_CPF <- ggplot() +
          geom_point(data = stats, aes(x=t, y=mean, color=as.factor(conc))) +
          geom_line(data = stats, aes(x=t, y=mean, color=conc, group=conc)) +
          scale_x_continuous(breaks = x.breaks, labels = x.labels) +
          scale_color_manual(values = colors, labels=legend.labels) +
          geom_ribbon(data = stats,
                      aes(x=t, ymax=mean+CI, ymin=mean-CI, group=conc, fill=conc),
                      alpha = 0.25) +
          geom_rect(aes(xmin=10,xmax=30,ymin=-2.25,ymax=-0.5) ,fill="white", color="black") +
          geom_rect(aes(xmin=30,xmax=50,ymin=-2.25,ymax=-0.5) ,fill="black", color="black") +
          annotate("text", x=c(20,40), y=rep(-1.3,2), color=c("black","white"), label=c("Light Phase","Dark Phase"), size=5) +
          scale_fill_manual(values = colors, labels=legend.labels) +
          labs(title = title, subtitle = "Acclimation Period Excluded: 50% Confidence Bands",
               x = title.t, y = title.mean, color = title.legend) +
          guides(fill = "none") +
          theme_bw() +
          theme(text = element_text(size = 22))
```
```{r, CPF-active-curves}
row1_CPF <- rows_n[[chemical]][["strtlAavg"]]
row2_CPF <- rows_n[[chemical]][["hbt1_D"]]

fit1_CPF <- concRespCoreZR(row1_CPF, do.plot = TRUE, verbose.plot = FALSE)[["plot"]] +
              theme(text = element_text(size=22))
legend <- cowplot::get_legend(fit1_CPF)

fit1_CPF <- fit1_CPF + 
              theme(text = element_text(size=18), legend.position = "none") +
              labs(title = "Startle Acceleration versus\nAverage Speed in Light", subtitle = "")
fit2_CPF <- concRespCoreZR(row2_CPF, do.plot = TRUE, verbose.plot = FALSE)[["plot"]] + 
              theme(text = element_text(size=18), legend.position = "none") +
              labs(y = "", title = "Habituation 1 in Dark")
```
```{r, grid-plot, fig.dim=c(17,17)}
p1_CPF <- cowplot::plot_grid(NULL, SAplot_CPF, NULL, nrow=1, rel_widths = c(.5,2,.5), labels = c("","A",""), label_size = 24)
p2_CPF <- cowplot::plot_grid(fit1_CPF, fit2_CPF, legend, nrow=1, rel_widths = c(1,1,.4), labels = list("B","C"), label_size = 24)
cowplot::plot_grid(p1_CPF, p2_CPF, nrow=2)
```

#### BMC Heatmap to be displayed later.

```{r, load-BMC-data}
ac <- c("avgS_L", "hbt1_L", "hbt2_L","RoA_L",
        "strtlA","strtlAavg", "strtlF",
        "avgS_D","hbt1_D", "hbt2_D", "RoA_D",
        "avgS_T","AUC_r")

# tcplfits_n <- mc5 # tcplfits_n was not loading bc it was not in the Data folder, not sure what this is supposed to be but i'm going to try tcpl out data, KC: 24Nov23
# tcplfits_n$chm <- tcplfits_n$name

## Gather BMC's
bmc <- lapply(tcplfits_n, function(chm) unlist(lapply(chm, function(fit) {
  hitcall <- fit[["summary"]]$hitcall
  bmd <- fit[["summary"]]$bmd
  if (!(hitcall>0.8 & !is.na(bmd) & bmd != 0)) {
    bmd <- 10000
  }
  bmd
})))
bmc <- do.call("rbind", bmc)
bmc <- log10(bmc[,colnames(bmc)%in%ac])

# Identify active chemicals
actives <- rownames(bmc)[apply(bmc, 1, function(row) any(row < 4))]

# PBDE-47 name is too long
rownames(bmc)[50] <- "PBDE-47"
actives[19] <- "PBDE-47"
```
```{r, layer-matrix}
# Create a matrix specifying if an up, down, up and down, or down and up arrow should be printed in cells.
fit.data <- lapply(tcplfits_n, function(chm) chm[-c(1,9,14)])
layer.mat <- lapply(fit.data, function(chm) unlist(lapply(chm, function(fit) {
                hitcall <- fit[["summary"]]$hitcall
                fit_method <- fit[["summary"]]$fit_method
                dir <- sign(fit[["summary"]]$top)
                if (hitcall>0.8 & fit_method=="gnls" & dir==1) {
                  layer <- 0
                } else if (hitcall>0.8 & fit_method=="gnls" & dir==-1) {
                  layer <- 1
                } else if (hitcall>0.8 & dir==1) {
                  layer <- 2
                } else if (hitcall>0.8 & dir==-1) {
                  layer <- 3
                } else layer <- 4
              })))
layer.mat <- do.call("rbind", layer.mat)
rownames(layer.mat)[50] <- "PBDE-47" # Change PBDE-47 name to match BMD matrix
layer.mat1 <- layer.mat[row.names(layer.mat) %in% actives,]

# Change rownames to include the number of active endpoints per chemical
to.fit.rownames <- tcpl_out.dt[hitcall>0.8, .N, by=.(name)][, paste0(name," (",N,")")]
to.fit.rownames[19] <- "PBDE-47 (5)"

rownames(layer.mat1) <- to.fit.rownames
```
```{r, heatmap-legends-labels, warning=FALSE}
# Column labels
col_labels <- c(expression("Average Speed in Light"^1), "Habiutation 1 in Light", "Habituation 2 in Light", expression("Range of Activity in Light"),
                "Startle Acceleration", "Startle Relative to Avg. Speed in Light", "Startle Fold-Change",
                expression("Average Speed in Dark"^1), "Habituation 1 in Dark", "Habituation 2 in Dark", expression("Range of Activity in Dark"),
                "Average Speed in Both Phases", expression("AUC in Dark / AUC in Light Ratio"^2)) # Superscripts notate references in poster
# Legends

# Custom heat legend.
f2 = circlize::colorRamp2(seq(min(bmc), max(bmc), length = 8), rev(viridis(8)), space = "sRGB")
heat_lgd = Legend(col_fun = f2,
                  title = paste0("BMC log(","\U03BC","M)"),
                  title_position = "lefttop",
                  legend_width = unit(4,"cm"),
                  direction = "horizontal")
# Column annotation by phase legend.
ann_lgd = Legend(labels = c("Light","Transition","Dark","Light+Dark"),
                 title = "Phase",
                 title_position = "leftcenter",
                 labels_gp = gpar(fontsize=8),
                 title_gp = gpar(fontsize=8),
                 legend_gp = grid::gpar(fill = c("white","grey","black","red")),
                 border = TRUE,
                 nrow = 1,
                 column_gap = unit(5, 'mm'))
# Legend for cell signal arrows.
dir_lgd = Legend(labels = c(paste("\U2191","Gain"),
                            paste("\U2193","Loss"),
                            paste("\U21C5","GainLoss"),
                            paste("\U21F5","LossGain")),
                 title = "Signal Direction",
                 labels_gp = gpar(fontsize=8),
                 title_gp = gpar(fontsize=8),
                 title_position = "leftcenter",
                 nrow = 1,
                 column_gap = unit(0, 'mm')) # Will produce warnings, don't worry.
lgd_list <- packLegend(ann_lgd, dir_lgd)

# Create column annotation indicating the phase of the LMR that is described.
column_ha <- ComplexHeatmap::HeatmapAnnotation(Phase = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
                                                        levels=c("Light","Transition","Dark","Light+Dark")),
                                               border = TRUE,
                                               simple_anno_size = unit(0.25, 'cm'),
                                               col = list(Phase=c("Light"="white",
                                                                  "Transition"="grey",
                                                                  "Dark"="black",
                                                                  "Light+Dark"="red")),
                                               annotation_legend_param = list(nrow = 1),
                                               show_annotation_name = FALSE,
                                               show_legend = FALSE)

# Create function to add arrows indicating signal direction in cells.
cell_fun <- function(j, i, x, y, width, height, fill) {
  if (layer.mat1[i,j] == 0) {
    grid.text("\U21C5", x, y, gp=gpar(fontsize=8))
  } else if (layer.mat1[i,j] == 1) {
    grid.text("\U21F5", x, y, gp=gpar(fontsize=8))
  } else if (layer.mat1[i,j] == 2) {
    grid.text("\U2191", x, y, gp=gpar(fontsize=8))
  } else if (layer.mat1[i,j] == 3) {
    grid.text("\U2193", x, y, gp=gpar(fontsize=8))
  }
}
```
```{r, heatmap, warning=FALSE, fig.dim=c(8,8)}
# isolate data for heatmap
to.fit <- bmc[row.names(bmc) %in% actives,]
rownames(to.fit) <- to.fit.rownames

# Create main heat map.
htlist <- ComplexHeatmap::Heatmap(to.fit,

                        # Specify some parameters for heat legend.
                        name = paste0("BMC log(","\U03BC","M)"),
                        col = f2,
                        border_gp = grid::gpar(col="black",lwd=1),
                        rect_gp=grid::gpar(col="grey"),
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(legend_height = unit(3.5,"cm"),
                                                    direction = "vertical",
                                                    title_gp = grid::gpar(fontsize=10),
                                                    labels_gp = grid::gpar(fontsize=10)),

                        # Heatmap width and height
                        # width = unit(16,"in"),
                        # height = unit(18,"in"),

                        # Column label parameters
                        column_labels = col_labels, column_names_rot = 45,


                        # Split columns by phase.
                        column_split = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
                                              levels=c("Light","Transition","Dark","Light+Dark")),

                        # Specify some column parameters.
                        column_title = NULL,
                        top_annotation = column_ha,

                        # Add signal direction arrows.
                        cell_fun = cell_fun,

                        # Specify some parameters row dendrogram aesthetics and row labels.
                        row_title_side = "right",
                        row_title_rot = 0,
                        row_split = 5,
                        row_dend_side = "right",
                        row_names_side = "left",

                        # Clustering parameters.
                        cluster_columns = FALSE,
                        cluster_rows = TRUE,
                        clustering_distance_rows = "pearson",

                        # Font sizes
                        row_names_gp = grid::gpar(fontsize=10),
                        column_names_gp = grid::gpar(fontsize=10),
                        row_title_gp = grid::gpar(fontsize=10),
                        column_title_gp = grid::gpar(fontsize=10)
                        )
```

#### Supplemental Figure 5: Activity in endpoints other than Average Speed endpoints.

```{r, layerMat-cellFun}
isolate <- actives[order(actives)]
isolate <- c(isolate[c(1,2,6,8,21)], isolate[c(10,12,13,20,22)])

layer.mat2 <- layer.mat[isolate,]

cell_fun1 <- function(j, i, x, y, width, height, fill) {
  if (layer.mat2[i,j] == 0) {
    grid.text("\U21C5", x, y, gp=gpar(fontsize=12))
  } else if (layer.mat2[i,j] == 1) {
    grid.text("\U21F5", x, y, gp=gpar(fontsize=12))
  } else if (layer.mat2[i,j] == 2) {
    grid.text("\U2191", x, y, gp=gpar(fontsize=12))
  } else if (layer.mat2[i,j] == 3) {
    grid.text("\U2193", x, y, gp=gpar(fontsize=12))
  }
}
```
```{r, new-activity, fig.dim=c(6,6), warning=FALSE}
htlist2 <- ComplexHeatmap::Heatmap(bmc[isolate,],

                        # Specify some parameters for heat legend.
                        name = paste0("BMC log(","\U03BC","M)"),
                        col = f2,
                        border_gp = grid::gpar(col="black",lwd=1),
                        rect_gp=grid::gpar(col="grey"),
                        show_heatmap_legend = TRUE,
                        heatmap_legend_param = list(legend_height = unit(3.5,"cm"),
                                                    direction = "vertical",
                                                    title_gp = grid::gpar(fontsize=10),
                                                    labels_gp = grid::gpar(fontsize=10)),

                        # Heatmap width and height
                        # width = unit(16,"in"),
                        # height = unit(18,"in"),

                        # Column label parameters
                        column_labels = col_labels, column_names_rot = 45,


                        # Split columns by phase and row by activity type
                        column_split = factor(c(rep("Light",4), rep("Transition",3),rep("Dark",4),rep("Light+Dark",2)),
                                              levels=c("Light","Transition","Dark","Light+Dark")),
                        # row_split = factor(c(rep("1",5), rep("2",5))),

                        # Specify some column parameters.
                        column_title = NULL,
                        top_annotation = column_ha,

                        # Add signal direction arrows.
                        cell_fun = cell_fun1,

                        # Specify some parameters row dendrogram aesthetics and row labels.
                        row_title = NULL,
                        row_title_rot = 0,
                        #row_split = 3,
                        row_names_side = "left",

                        # Clustering parameters.
                        cluster_columns = FALSE,
                        cluster_rows = FALSE,

                        # Font sizes
                        row_names_gp = grid::gpar(fontsize=12),
                        column_names_gp = grid::gpar(fontsize=12),
                        row_title_gp = grid::gpar(fontsize=16),
                        column_title_gp = grid::gpar(fontsize=16)
                        )

ht <- draw(htlist2, merge_legend = FALSE, annotation_legend_list = lgd_list,
           annotation_legend_side = "top", align_annotation_legend = "heatmap_center")
ro <- row_order(ht)
co <- column_order(ht)

# Highlight startle endpoints and average acceleration in Dark endpoint
decorate_heatmap_body(paste0("BMC log(","\U03BC","M)"), row_slice = 1, column_slice = 1, {
  grid.rect(unit(1.025,'npc'), unit(0.7,'npc'),
            width = (length(co[[1]]) + length(co[[2]]))/length(co[[1]]) * unit(0.415,'npc') + unit(1,'mm'),
            height = (length(ro[[1]]) + length(ro[[2]]))/length(ro[[1]]) * unit(0.344,'npc') + unit(1,'mm'),
            gp = gpar(lwd=2, lty=1, fill=NA, col="red"), just=c('left','top')
  )
}) 
decorate_heatmap_body(paste0("BMC log(","\U03BC","M)"), row_slice = 1, column_slice = 1, {
  grid.rect(unit(2.05,'npc'), unit(1,'npc'),
            width = (length(co[[1]]) + length(co[[2]]))/length(co[[1]]) * unit(0.13,'npc') + unit(1,'mm'),
            height = (length(ro[[1]]) + length(ro[[2]]))/length(ro[[1]]) * unit(0.245,'npc') + unit(1,'mm'),
            gp = gpar(lwd=2, lty=1, fill=NA, col="red"), just=c('left','top')
  )
})
```

#### Supplemental Table 6: Number of hits per active chemical.

```{r, number-of-hits-per-active}
count.hits.chm <- tcpl_out.dt[hitcall>0.8 & !endp%in%exclude, .N, by = .(name)]
datatable(count.hits.chm[order(-N)], colnames=c("Chemical Name","Number of Hits"), caption = "Number of Hits per Chemical",
          rownames = FALSE)
```

#### Supplemental Figure 6: Create plots for comparing Paraquat and Heptachlor epoxide activity profiles.

```{r, HepEpox-bhv-profiles}
chemical <- "Heptachlor epoxide"

# Units
unit.t = "min"
unit.mov = "cm"
unit.conc = paste0("\U03BC","M")
prsp = "SA"
no.A = 10

# Extract chemical data
group <- unique(lmr0.egid[cpid == chemical, egid])

## Identify movement columns of interest
t.cols <- grep("vt", names(lmr0.egid), value = TRUE)
cols <- t.cols[(no.A+1):length(t.cols)]
A.cols <- t.cols[!(t.cols%in%cols)]

## extract data to be plotted, exclude acclimation
to.fit <- lmr0.egid[cpid==chemical | (wllt=="v" & egid==group), -A.cols, with=FALSE]

# create appropriate axes titles for plots
label.y <- "Speed"

# Format data for plotting

## calculate mean and 50% CIs for each vector column by concentration group, excluding concentration
exclude.A <- t.cols[!(t.cols%in%A.cols)]
means <- to.fit[, lapply(.SD, function(col) mean(col,na.rm=T)),
                .SDcols = exclude.A,
                by = conc]

## calculate CI's for transformed values then transform back
shift <- 1
logCIs <- to.fit[, lapply(.SD, function(x) log10(x+shift)), .SDcols=exclude.A, by=conc][
  , lapply(.SD, function(x) t.test(x,conf.level=0.50)$conf.int), .SDcols=exclude.A, by=conc]
CIs <- logCIs[, lapply(.SD, function(x) (10^x)-shift), by=conc][,lapply(.SD, function(col) abs(diff(col))/2), .SDcols=exclude.A, by=conc]

## elongate means and CIs data, and join
means_long <- data.table::melt(means, id.vars = "conc", variable.name = "t", value.name = "mean")
means_long[, t := sub("vt","",t)]
CIs_long <- data.table::melt(CIs, id.vars = "conc", variable.name = "t", value.name = "CI")
CIs_long[, t := sub("vt","",t)]
stats <- means_long[CIs_long, on = c("conc","t")][, conc := as.factor(conc)]
stats[, t := as.numeric(t)]

# create standard error of mean estimates by time period and plot as ribbons or error bars

# plot time-series data

## create title, x- and y-axis titles, legend labels, and legend title
title <- paste0("Sample Averaged Time-Series for ", chemical)
title.t <- paste0("Time (",unit.t,")")
title.mean <- paste0("Mean ", label.y, " (",unit.mov,"/",unit.t,")")
conc.n <- to.fit[wllq==1, .N, by=.(conc)][order(conc)]
legend.labels <- paste0(conc.n$conc, ", n=", conc.n$N)

title.legend <- paste0("Concentration (", unit.conc, ")")

## get better colors for plotting
N <- length(unique(to.fit[,conc]))
colors <- viridis::viridis(N)

## create x-axis breaks and labels
m <- as.integer(max(means_long[,t]))
x.breaks <- seq(from=no.A,to=m,by=10)
x.labels1 <- 2*seq(from=no.A,to=m,by=10)
x.labels2 <- x.labels1 - 2
x.labels <- paste(x.labels2, x.labels1, sep="-")

## plot
plot.HepEpox <- ggplot() +
          geom_point(data = stats, aes(x=t, y=mean, color=as.factor(conc))) +
          geom_line(data = stats, aes(x=t, y=mean, color=conc, group=conc)) +
          scale_x_continuous(breaks = x.breaks, labels = x.labels) +
          scale_color_manual(values = colors, labels=legend.labels) +
          geom_ribbon(data = stats,
                      aes(x=t, ymax=mean+CI, ymin=mean-CI, group=conc, fill=conc),
                      alpha = 0.25) +
          geom_rect(aes(xmin=10,xmax=30,ymin=-1.25,ymax=-0.5) ,fill="white", color="black") +
          geom_rect(aes(xmin=30,xmax=50,ymin=-1.25,ymax=-0.5) ,fill="black", color="black") +
          annotate("text", x=c(20,40), y=rep(-0.875,2), color=c("black","white"), label=c("Light Phase","Dark Phase"), size=3) +
          scale_fill_manual(values = colors, labels=legend.labels) +
          labs(title = title, subtitle = "Acclimation Period Excluded: 50% Confidence Bands",
               x = title.t, y = title.mean, color = title.legend) +
          guides(fill = "none") +
          theme_bw() +
          theme(text = element_text(size = 18))
```
```{r, HepEpox-signal}
signal.HepEpox <- tcpl_out.dt[name=="Heptachlor epoxide" & hitcall>0.8 & !endp%in%exclude, .(endp,top_over_cutoff)]
table.HepEpox <- gridExtra::tableGrob(signal.HepEpox, rows = NULL, cols = c("Endpoint Abbreviation", "Top Over Cutoff"))

# Add table grob
plot.HepEpox <- plot.HepEpox + 
                  annotation_custom(table.HepEpox, xmin=13, xmax=23, ymin=10, ymax=12)
```
```{r, Paraquat-bhv-profiles}
chemical <- "Paraquat"

# Units
unit.t = "min"
unit.mov = "cm"
unit.conc = paste0("\U03BC","M")
prsp = "SA"
no.A = 10

# Extract chemical data
group <- unique(lmr0.egid[cpid == chemical, egid])

## Identify movement columns of interest
t.cols <- grep("vt", names(lmr0.egid), value = TRUE)
cols <- t.cols[(no.A+1):length(t.cols)]
A.cols <- t.cols[!(t.cols%in%cols)]

## extract data to be plotted, exclude acclimation
to.fit <- lmr0.egid[cpid==chemical | (wllt=="v" & egid==group), -A.cols, with=FALSE]

# create appropriate axes titles for plots
label.y <- "Speed"

# Format data for plotting

## calculate mean and 50% CIs for each vector column by concentration group, excluding concentration
exclude.A <- t.cols[!(t.cols%in%A.cols)]
means <- to.fit[, lapply(.SD, function(col) mean(col,na.rm=T)),
                .SDcols = exclude.A,
                by = conc]

## calculate CI's for transformed values then transform back
shift <- 1
logCIs <- to.fit[, lapply(.SD, function(x) log10(x+shift)), .SDcols=exclude.A, by=conc][
  , lapply(.SD, function(x) t.test(x,conf.level=0.50)$conf.int), .SDcols=exclude.A, by=conc]
CIs <- logCIs[, lapply(.SD, function(x) (10^x)-shift), by=conc][,lapply(.SD, function(col) abs(diff(col))/2), .SDcols=exclude.A, by=conc]

## elongate means and CIs data, and join
means_long <- data.table::melt(means, id.vars = "conc", variable.name = "t", value.name = "mean")
means_long[, t := sub("vt","",t)]
CIs_long <- data.table::melt(CIs, id.vars = "conc", variable.name = "t", value.name = "CI")
CIs_long[, t := sub("vt","",t)]
stats <- means_long[CIs_long, on = c("conc","t")][, conc := as.factor(conc)]
stats[, t := as.numeric(t)]

# create standard error of mean estimates by time period and plot as ribbons or error bars

# plot time-series data

## create title, x- and y-axis titles, legend labels, and legend title
title <- paste0("Sample Averaged Time-Series for ", chemical)
title.t <- paste0("Time (",unit.t,")")
title.mean <- paste0("Mean ", label.y, " (",unit.mov,"/",unit.t,")")
conc.n <- to.fit[wllq==1, .N, by=.(conc)][order(conc)]
legend.labels <- paste0(conc.n$conc, ", n=", conc.n$N)

title.legend <- paste0("Concentration (", unit.conc, ")")

## get better colors for plotting
N <- length(unique(to.fit[,conc]))
colors <- viridis::viridis(N)

## create x-axis breaks and labels
m <- as.integer(max(means_long[,t]))
x.breaks <- seq(from=no.A,to=m,by=10)
x.labels1 <- 2*seq(from=no.A,to=m,by=10)
x.labels2 <- x.labels1 - 2
x.labels <- paste(x.labels2, x.labels1, sep="-")

## plot
plot.Paraquat <- ggplot() +
          geom_point(data = stats, aes(x=t, y=mean, color=as.factor(conc))) +
          geom_line(data = stats, aes(x=t, y=mean, color=conc, group=conc)) +
          scale_x_continuous(breaks = x.breaks, labels = x.labels) +
          scale_color_manual(values = colors, labels=legend.labels) +
          geom_ribbon(data = stats,
                      aes(x=t, ymax=mean+CI, ymin=mean-CI, group=conc, fill=conc),
                      alpha = 0.25) +
          geom_rect(aes(xmin=10,xmax=30,ymin=-1.25,ymax=-0.5) ,fill="white", color="black") +
          geom_rect(aes(xmin=30,xmax=50,ymin=-1.25,ymax=-0.5) ,fill="black", color="black") +
          annotate("text", x=c(20,40), y=rep(-0.875,2), color=c("black","white"), label=c("Light Phase","Dark Phase"), size=3) +
          scale_fill_manual(values = colors, labels=legend.labels) +
          labs(title = title, subtitle = "Acclimation Period Excluded: 50% Confidence Bands",
               x = title.t, y = title.mean, color = title.legend) +
          guides(fill = "none") +
          theme_bw() +
          theme(text = element_text(size = 18))

# Paraquat signal
signal.Paraquat <- tcpl_out.dt[name=="Paraquat" & hitcall>0.8 & !endp%in%exclude, .(endp,top_over_cutoff)]
table.Paraquat <- gridExtra::tableGrob(signal.Paraquat, rows = NULL, cols = c("Endpoint Abbreviation", "Top Over Cutoff"))

# Add table grob
plot.Paraquat <- plot.Paraquat + 
                  annotation_custom(table.Paraquat, xmin=13, xmax=23, ymin=12, ymax=16)
```
```{r, fig.dim=c(20,13)}
cowplot::plot_grid(plot.HepEpox, plot.Paraquat, ncol = 2, nrow = 1)
```

### Potential Reference Chemicals

#### Supplemental Table 7: Active Chemicals Inducing the Strongest Signal in Endpoints

```{r, refer-chem}
aenms <- strgEffectors_byEndp[, unique(aenm)]

# Format data and print as a good table
strgEffectors_formatted <- strgEffectors_byEndp[order(aenm), .(aenm,direction,cpid,conc,rval)]
strgEffectors_formatted[, rval:=round(rval, digits=2)]
setnames(strgEffectors_formatted, names(strgEffectors_formatted),
         c("Assay Endpoint Name","Signal Direction","Chemical Name",paste0("Concentration ","(\U03BC","M)"),"SEs from Control Mean"))
datatable(strgEffectors_formatted)
```

### BMC Estimates

#### KC supp: winning model bar chart

```{r, winning model}

mc5[hitc==1, order.fit := .N, by=fit_method]

p1 <- ggplot(mc5[hitc==1], aes(x=reorder(fit_method, order.fit)))+
  geom_bar(width=0.8, fill='darkgrey',color="black")+
  stat_count(geom = "text", colour = "black", size = 5,
              aes(label = paste(..count..,"57",sep="/")), vjust=-0.5)+
  theme_classic()+
    labs(title="Winning concentration-response models",
         #y="Hits", 
         x=NULL)+
      theme(text= element_text(size=18))+
    theme(plot.title=element_text(size=16))

ggsave(p1, file='figures/Winning_model_bar_plot_24Nov23.tiff',
       dpi=300, width=8, height=6)

```


#### Supplemental Table 8: Median BMC and BMC Ranges across active endpoints for active chemicals

```{r, median-BMCs-chm}
select <- apply(bmc, 1, function(row) any(row<4))
med_BMC <- bmc[select,]
med_BMC[med_BMC==4] <- NA

med_BMC.dt <- as.data.table( t(apply(med_BMC, 1, summary, na.rm=TRUE)), keep.rownames = "Chemical Name" )
med_BMC.dt[, `:=` ("1st Qu."=NULL,"Mean"=NULL,"3rd Qu."=NULL,"NA's"=NULL), with=FALSE]
med_BMC.dt[, `:=` (`Min.`=10^`Min.`,`Median`=10^`Median`,`Max.`=10^`Max.`)]
med_BMC.dt[, `:=` (`Min.`=signif(`Min.`, digits=3),`Median`=signif(`Median`, digits=3),`Max.`=signif(`Max.`, digits=3))]

datatable(med_BMC.dt, rownames = FALSE, 
          caption = "Minimum, Median,and Maximum BMCs of Active Chemicals Across Active Endpoints",
          colnames = c("Chemical Name", paste0("Minimum BMC (","\U03BC","M)"),
                       paste0("Median BMC (","\U03BC","M)"),
                       paste0("Maximum BMC (","\U03BC","M)")
          )
)
```

#### Supplemental Figure 8: Diazepam behavior data and active curve-fits.

```{r, SA-plot-function}
plot_SA <- function(chemical) {
              # Units
              unit.t = "min"
              unit.mov = "cm"
              unit.conc = paste0("\U03BC","M")
              prsp = "SA"
              no.A = 10

              # Extract chemical data
              group <- unique(lmr0.egid[cpid == chemical, egid])

              ## Identify movement columns of interest
              t.cols <- grep("vt", names(lmr0.egid), value = TRUE)
              cols <- t.cols[(no.A+1):length(t.cols)]
              A.cols <- t.cols[!(t.cols%in%cols)]

              ## extract data to be plotted, exclude acclimation
              to.fit <- lmr0.egid[cpid==chemical | (wllt=="v" & egid==group), -A.cols, with=FALSE]

              # create appropriate axes titles for plots
              label.y <- "Speed"

              # Format data for plotting

              ## calculate mean and 50% CIs for each vector column by concentration group, excluding concentration
              exclude.A <- t.cols[!(t.cols%in%A.cols)]
              means <- to.fit[, lapply(.SD, function(col) mean(col,na.rm=T)),
                              .SDcols = exclude.A,
                              by = conc]

              ## calculate CI's for transformed values then transform back
              shift <- 1
              logCIs <- to.fit[, lapply(.SD, function(x) log10(x+shift)), .SDcols=exclude.A, by=conc][
                , lapply(.SD, function(x) t.test(x,conf.level=0.50)$conf.int), .SDcols=exclude.A, by=conc]
              CIs <- logCIs[, lapply(.SD, function(x) (10^x)-shift), by=conc][,lapply(.SD, function(col) abs(diff(col))/2), .SDcols=exclude.A, by=conc]

              ## elongate means and CIs data, and join
              means_long <- data.table::melt(means, id.vars = "conc", variable.name = "t", value.name = "mean")
              means_long[, t := sub("vt","",t)]
              CIs_long <- data.table::melt(CIs, id.vars = "conc", variable.name = "t", value.name = "CI")
              CIs_long[, t := sub("vt","",t)]
              stats <- means_long[CIs_long, on = c("conc","t")][, conc := as.factor(conc)]
              stats[, t := as.numeric(t)]

              # create standard error of mean estimates by time period and plot as ribbons or error bars

              # plot time-series data

              ## create title, x- and y-axis titles, legend labels, and legend title
              title <- paste0("Sample Averaged Time-Series for ", chemical)
              title.t <- paste0("Time (",unit.t,")")
              title.mean <- paste0("Mean ", label.y, " (",unit.mov,"/",unit.t,")")
              conc.n <- to.fit[wllq==1, .N, by=.(conc)][order(conc)]
              legend.labels <- paste0(conc.n$conc, ", n=", conc.n$N)

              title.legend <- paste0("Concentration (", unit.conc, ")")

              ## get better colors for plotting
              N <- length(unique(to.fit[,conc]))
              colors <- viridis::viridis(N)

              ## create x-axis breaks and labels
              m <- as.integer(max(means_long[,t]))
              x.breaks <- seq(from=no.A,to=m,by=10)
              x.labels1 <- 2*seq(from=no.A,to=m,by=10)
              x.labels2 <- x.labels1 - 2
              x.labels <- paste(x.labels2, x.labels1, sep="-")

              ## plot
              plot <- ggplot() +
                geom_point(data = stats, aes(x=t, y=mean, color=as.factor(conc))) +
                geom_line(data = stats, aes(x=t, y=mean, color=conc, group=conc)) +
                scale_x_continuous(breaks = x.breaks, labels = x.labels) +
                scale_color_manual(values = colors, labels=legend.labels) +
                geom_ribbon(data = stats,
                            aes(x=t, ymax=mean+CI, ymin=mean-CI, group=conc, fill=conc),
                            alpha = 0.25) +
                geom_rect(aes(xmin=10,xmax=30,ymin=-1.25,ymax=-0.5) ,fill="white", color="black") +
                geom_rect(aes(xmin=30,xmax=50,ymin=-1.25,ymax=-0.5) ,fill="black", color="black") +
                annotate("text", x=c(20,40), y=rep(-0.875,2), color=c("black","white"), label=c("Light Phase","Dark Phase"), size=5) +
                scale_fill_manual(values = colors, labels=legend.labels) +
                labs(title = title, subtitle = "Acclimation Period Excluded: 50% Confidence Bands",
                     x = title.t, y = title.mean, color = title.legend) +
                guides(fill = "none") +
                theme_bw() +
                theme(text = element_text(size = 22))

              return(plot)
}
```

```{r, Diazepam-plots, fig.dim = c(17,17)}
chemical <- "Diazepam"
SAplot_Dzp <- plot_SA(chemical)
row1_Dzp <- rows_n[[chemical]][["avgS_L"]]
row2_Dzp <- rows_n[[chemical]][["RoA_L"]]
row3_Dzp <- rows_n[[chemical]][["avgS_T"]]

fit1_Dzp <- concRespCoreZR(row1_Dzp, do.plot = TRUE, verbose.plot = FALSE)[["plot"]] 

legend_Dzp <- cowplot::get_legend(fit1_Dzp)

fit1_Dzp <- fit1_Dzp + theme(legend.position = "none")
fit2_Dzp <- concRespCoreZR(row2_Dzp, do.plot = TRUE, verbose.plot = FALSE)[["plot"]] + theme(legend.position = "none")
fit3_Dzp <- concRespCoreZR(row3_Dzp, do.plot = TRUE, verbose.plot = FALSE)[["plot"]] + theme(legend.position = "none")

p1 <- cowplot::plot_grid(fit1_Dzp, fit2_Dzp, fit3_Dzp, legend_Dzp, nrow=2)

cowplot::plot_grid(SAplot_Dzp, p1, nrow=2)
```

#### Supplemental Figure 9: D-sorbitol behavior data and active curve-fits.

```{r, Diazepam-plots, fig.dim = c(17,17)}
chemical <- "D-sorbitol"
SAplot_Srb <- plot_SA(chemical)

row1_Srb <- rows_n[[chemical]][["hbt1_L"]]
row2_Srb <- rows_n[[chemical]][["strtlA"]]
row3_Srb <- rows_n[[chemical]][["strtlAavg"]]

fit1_Srb <- concRespCoreZR(row1_Srb, do.plot = TRUE, verbose.plot = FALSE)[["plot"]] 

legend_Srb <- cowplot::get_legend(fit1_Srb)

fit1_Srb <- fit1_Srb + theme(legend.position = "none")
fit2_Srb <- concRespCoreZR(row2_Srb, do.plot = TRUE, verbose.plot = FALSE)[["plot"]] + theme(legend.position = "none")
fit3_Srb <- concRespCoreZR(row3_Srb, do.plot = TRUE, verbose.plot = FALSE)[["plot"]] + theme(legend.position = "none")

p1_Srb <- cowplot::plot_grid(fit1_Srb, fit2_Srb, fit3_Srb, legend_Srb, nrow=2)

cowplot::plot_grid(SAplot_Srb, p1, nrow=2)
```

#### Figure 5: BMC confidence interval overlap.

```{r, BMC-CIs, fig.dim=c(10,10)}
tcpl_out.dt <- as.data.table(DNT60_tcpl_out)

to.plot <- tcpl_out.dt[hitcall>0.8 & endp%in%c("avgS_L","avgA_L","avgJ_L","hbt_L",
                                                 "strtlA","strtlAavg","strtlF",
                                                 "avgS_D","avgA_D","avgJ_D","hbt_D",
                                                 "avgS_T","AUC_r")]
to.plot[, endp := factor(endp, levels=rev(c("avgS_L","avgA_L","avgJ_L","hbt_L",
                                        "strtlA","strtlAavg","strtlF",
                                        "avgS_D","avgA_D","avgJ_D","hbt_D",
                                        "avgS_T","AUC_r")))]
to.plot[name=="Polybrominated diphenyl ether (PBDE)-47", name:="PBDE-47"]
BMC_facet <- ggplot(to.plot, aes(x=log10(bmd),y=endp)) +
  geom_point() +
  geom_errorbar(aes(xmin=log10(bmdl), xmax=log10(bmdu))) +
  scale_x_continuous(breaks=c(-3,-2,-1,0,1,2)) +
  facet_wrap(. ~ name)+
  theme_bw() +
  theme(text = element_text(size=18)) +
  labs(title = "Overlap of BMC Estimates for Chemicals", x = "log(BMC)", y = "Endpoint")
BMC_facet
```

#### Supplemental Figure 7: Amphetamine active curve-fits.

```{r, Amphetamine-curveFits, fig.dim=c(10,10)}
chemical <- "Amphetamine"

row1 <- rows_n[[chemical]][["avgS_L"]]
row2 <- rows_n[[chemical]][["hbt1_L"]]
row3 <- rows_n[[chemical]][["strtlF"]]

fit1 <- concRespCoreZR(row1, do.plot = TRUE, verbose.plot = FALSE)[["plot"]]
fit2 <- concRespCoreZR(row2, do.plot = TRUE, verbose.plot = FALSE)[["plot"]]
fit3 <- concRespCoreZR(row3, do.plot = TRUE, verbose.plot = FALSE)[["plot"]]

legend <- cowplot::get_legend(fit1)
title <- cowplot::ggdraw() +
  cowplot::draw_label("Amphetamine Exposure: Active Curve-Fits",
                      x = 0, hjust = 0, size=24) +
  theme(plot.margin = margin(0,0,0,7))

edit_plot <- function(plot) {
  title <- plot$labels$title
  plot$labels$title <- gsub(paste0(chemical," for "), "", title)
  plot$labels$subtitle <- NULL
  plot <- plot + theme(legend.position="none")
  return(plot)
}

plots <- lapply(list(fit1, fit2, fit3), edit_plot)
plots_w_legend <- list(plots[[1]],plots[[2]],plots[[3]],legend)

p1 <- cowplot::plot_grid(plotlist=plots_w_legend, nrow=2)
p2 <- cowplot::plot_grid(p1, legend, rel_widths = c(3, .4))

cowplot::plot_grid(title, p1, ncol=1, rel_heights = c(0.1,1))
```

#### Figure 6: BMC Heatmap

```{r, BMC-heatmap}
draw(htlist, merge_legend = FALSE, annotation_legend_list = lgd_list, annotation_legend_side = "top", align_annotation_legend = "heatmap_center")
```

### Concordance Between this Study and Other Studies

Edit LOELs from this study so that only chemicals found active via tcplfit2 have LOELs calculated.

```{r, edit-DNT60LOELs}
bmc.long <- as.data.table( melt(bmc, value.name = "bmc") )
names(bmc.long) <- c("cpid","endp","BMC")
DNT60LOELs.long <- melt(DNT60LOELs, id.vars = "cpid", variable.name = "endp", value.name = "LOEL")
active.pairs <- bmc.long[BMC<4, .(cpid,endp)]

DNT60LOELs.long[!active.pairs, LOEL := NA, on = .(cpid,endp)]

# Widen edited data to replace DNT60LOELs
DNT60LOELs.1 <- dcast(DNT60LOELs.long, cpid ~ endp, value.var = "LOEL")
```

How many chemicals had papers associated with them?

```{r, num-associated-papers}
litReviewSummary[Number.of.associated.publications!=0, .N]
```

How many papers of the 34 report chemical effect.

```{r, papers-detect-activity}
length( litReviewConc[neurotox==1 & DOI!="DNT60", unique(DOI)] )
```

#### Supplemental Table 9: Literature Review Summary of Findings

```{r, lit-review-Summary-table}
litReviewSummary1 <- litReviewSummary[,-c(2,3,4)]
DT::datatable(litReviewSummary1, caption="Formatted Literature Review table.",
              extensions = 'FixedColumns',
              colnames = c("Chemical Name", "Number of Reviewed Publications", "Number of Reviewed Publications Reporting Effect", "Percent of Publications Reporting Effect"),
              options = list(scrollX=TRUE),
              rownames = FALSE)
```

#### Supplemental Table 10: Literature Review Summary for Active Chemicals in this Study

```{r, lit-review-Summary-table}
actives.1 <- actives
actives.1[19] <- "Polybrominated diphenyl ether (PBDE)-47"
litReviewSummary.subset <- litReviewSummary1[cpid %in% actives.1]
DT::datatable(litReviewSummary.subset, caption="Number of Publications and Activity Reporting for Active Chemicals",
              extensions = 'FixedColumns',
              colnames = c("Chemical Name", "Number of Reviewed Publications", "Number of Reviewed Publications Reporting Effect", "Percent of Publications Reporting Effect"),
              options = list(scrollX=TRUE),
              rownames = FALSE)
```

Find median LOELs for DNT60 study.

```{r, calculate-median}
# chmEndp_Active <- tcpl_out.dt[hitcall > 0.8, .(name,endp)]
# DNT60LOELs.melt <- melt(DNT60LOELs, id.vars = "cpid", variable.name="endp", value.name="bhvLOEL")
# DNT60LOELs.melt[chmEndp_Active, on = .(cpid,endp)]

DNT60_medLOELs <- DNT60LOELs.1[, .(cpid, med_LOEL = matrixStats::rowMedians(as.matrix(.SD),na.rm=TRUE)), .SDcols=names(DNT60LOELs.1)[-1]]
```

#### Table 2: Use median gabi behavioral LOELs to compare to other studies.

```{r, compare-LOELs}
compareLOELs <-litReviewLOELs[DOI != "DNT60"][DNT60_medLOELs, on = .(cpid)]
setnames(compareLOELs, "med_LOEL", "DNT60_med_LOEL")
compareLOELs[, LOEL_diff := neuro_LOEL - DNT60_med_LOEL]

compareLOEL_summary <- compareLOELs[, .(median_bhvLOEL_diff = median(LOEL_diff,na.rm=T), sd_diff_mag = sd(LOEL_diff,na.rm=TRUE)), by = .(cpid)][order(sd_diff_mag)]

compareLOEL_summary[, `:=` (median_bhvLOEL_diff = signif(median_bhvLOEL_diff,digits=3), sd_diff_mag = signif(sd_diff_mag,digits=3))]

DT::datatable(compareLOEL_summary,
              caption="Summarize Differences in LOEL Magnitudes",
              extensions = 'FixedColumns',
              options = list(scrollX=TRUE),
              rownames = FALSE)
```

### The Effect of Developmental Toxicity on the Detection of Neurotoxicity

How many chemicals have at least one associated paper that reports chemical activity?

```{r, chems-with-active-studies}
litReview_actives <- litReviewConc[DOI!="DNT60" & neurotox==1, unique(cpid)]
length(litReview_actives)
```

```{r, LOELs-to-dt, warning = FALSE}
# Gather data for later plots and questions
DNT60LOELs.long[, `:=` (DOI="DNT60", category="intra_neuro")]

compareLOELs.1 <- litReviewLOELs[DOI != "DNT60",-"dev_LOEL", with=FALSE][, .(cpid, DOI, LOEL=neuro_LOEL, category="inter_neuro")]
dev_LOELs <- litReviewLOELs[, .(LOEL=unique(dev_LOEL),category="intra_dev"), by=.(cpid)]
compareLOELs.2 <- rbind(DNT60LOELs.long, compareLOELs.1, dev_LOELs, fill = TRUE)
```
```{r, LOEL-inactives}
discordant_inactives <- litReviewSummary[!cpid%in%c(actives,"Polybrominated diphenyl ether (PBDE)-47"), .(cpid, Number.of.associated.publications, Number.of.publications.with.activity, `%.of.papers.with.activity`)][`%.of.papers.with.activity`>50][order(-`%.of.papers.with.activity`)]
```

How many chemicals active in tcplFit2 analysis, with associated publications had an associated publication report observed effect at at least one concentration.

```{r, activity-in-publications}
actives.2 <- litReviewSummary.subset[Number.of.associated.publications!=0, unique(cpid)]
table(actives.2 %in% litReview_actives)
```

How many chemicals had a majority of associated publications report activity?

```{r}
litReviewSummary.subset[`%.of.papers.with.activity`>50]
```


```{r, activity-in-publications}
actives.2 <- litReviewSummary.subset[Number.of.associated.publications!=0, unique(cpid)]
table(actives.2 %in% litReview_actives)
```

What chemicals were active in other publications (>50%) but inactive in our analysis?

```{r, inactives-widely-active-in-studies}
discordant_inactives
discordant_inactives[Number.of.associated.publications > 1]
```

#### Table 3: Median differences between developmental LOELs and study behavioral LOELs.

```{r, calc-dev-diffs}
LOEL_diff_DN <- dev_LOELs[,.(cpid,dev_LOEL=LOEL)][compareLOELs.2[category == "inter_neuro", .(cpid, DOI, LOEL)], on = .(cpid)][, .(cpid, DOI, mag_diff=LOEL-dev_LOEL)]
```
```{r, compare-median-dev-diff}
devBhvLOEL.diff <- LOEL_diff_DN[, .(median_mag_diff = median(mag_diff,na.rm=T), sd_mag_diff = sd(mag_diff,na.rm=T)), by = .(cpid)][order(-median_mag_diff)]

DT::datatable(devBhvLOEL.diff[!is.na(median_mag_diff), .(cpid = cpid, median_mag_diff = signif(median_mag_diff,digits=3), sd_mag_diff = signif(sd_mag_diff,digits=3))], caption="Median Difference in Magnitude from Developmental LOEL to Literature Review Behavioral LOELs",
              colnames = c("Chemical Name", "Median Magnitude Difference", "SD in Magnitude Difference"),
              extensions = 'FixedColumns',
              options = list(scrollX=TRUE),
              rownames = FALSE)
```

Exclude those without majority of publications reporting activity.

```{r, chms-devLOEL-comparison-majority}
cpid_maj_active <- litReviewSummary[`%.of.papers.with.activity`>50 & Number.of.associated.publications>1, cpid]
devBhvLOEL.diff[cpid %in% cpid_maj_active]
```


#### Figure 7: Developmental and nuero-toxic LOELs observed in this study and others.

```{r, order-chems-on-LOEL-values}
compareLOELs.to.plot <- data.table::copy(compareLOELs.2)

cpid_wO_pub <- litReviewSummary[Number.of.associated.publications==0, unique(cpid)]
cpid_w_pub <- litReviewSummary[Number.of.associated.publications!=0, unique(cpid)]

# Compare LOELs has different spellings
# Bis(tributyltin) oxide
# Diethylene glycol

compareLOELs.to.plot[cpid%in%cpid_w_pub, facet := 1]
compareLOELs.to.plot[cpid%in%cpid_wO_pub, facet := 2]

# Order chemicals in each facet first by developmental toxicity and then by median LOEL were devTox doesn't exist and then by median study LOEL where median LOEL doesn't exist
factor.orderA1 <- rev( compareLOELs.2[cpid%in%cpid_w_pub & category=="intra_dev" & !is.na(LOEL)][order(-LOEL), unique(cpid)] )
factor.orderB1 <- rev( compareLOELs.2[cpid%in%cpid_wO_pub & category=="intra_dev" & !is.na(LOEL)][order(-LOEL), unique(cpid)] )

factor.orderA2 <- DNT60_medLOELs[!(cpid%in%factor.orderA1) & cpid%in%cpid_w_pub & !is.na(med_LOEL)][order(med_LOEL), unique(cpid)]
factor.orderB2 <- DNT60_medLOELs[!(cpid%in%factor.orderB1) & cpid%in%cpid_wO_pub & !is.na(med_LOEL)][order(med_LOEL), unique(cpid)]

factor.orderA3 <- compareLOELs.2[!(cpid%in%factor.orderA2) & !(cpid%in%factor.orderA1) & cpid%in%cpid_w_pub & category=="inter_neuro", .(med_LOEL = median(LOEL,na.rm=TRUE)), by = .(cpid)][!is.na(med_LOEL)][order(med_LOEL), unique(cpid)]
factor.orderB3 <- compareLOELs.2[!(cpid%in%factor.orderB2) & !(cpid%in%factor.orderB1) & cpid%in%cpid_wO_pub][order(-cpid), unique(cpid)]

factor.orderA4 <- compareLOELs.2[!(cpid%in%factor.orderA3) & !(cpid%in%factor.orderA2) & !(cpid%in%factor.orderA1) & cpid%in%cpid_w_pub][order(-cpid), unique(cpid)]

factor.order <- c(factor.orderA4, factor.orderA3, factor.orderA2, factor.orderA1, factor.orderB3, factor.orderB2, factor.orderB1)

compareLOELs.to.plot$cpid <- factor(compareLOELs.to.plot$cpid, levels=factor.order)
```
```{r, facet-labeller}
facet_labels = list("1" = "Chemicals with Associated Publications",
                   "2" = "Chemicals without Associated Publications")
facet_labeller <- function(variable, value) {
  return(facet_labels[value])
}
```
```{r, compare-LOEL-figure, fig.dim=c(10,10)}
compare_LOELs <- ggplot() +
  geom_point(compareLOELs.to.plot, mapping = aes(x=LOEL, y=cpid, color=category, shape=category), size = 3) +
  scale_shape_discrete(labels = c("Extra-Study Behavioral LOELs","Developmental LOEL","Study Behavioral LOELs")) +
  scale_color_manual(labels = c("Extra-Study Behavioral LOELs","Developmental LOEL","Study Behavioral LOELs"), values=colors[c(1,8,4)]) +
  theme_bw() +
  theme(text = element_text(size=18)) +
  facet_wrap(facet~., dir = "h", as.table = TRUE, drop = TRUE, scale = "free_y", strip.position = "right", labeller = facet_labeller) + 
  labs(shape = "Critical Doses",
       color = "Critical Doses",
       x = paste0("Concentration (log10(",paste0("\U03BC","M"),"))"),
       y = "Chemical Name")
```

#### Supplemental Figure 10: Unity plot of median potencies.

```{r, format-data}
# plot medians with quantiles and interquartile range
cHairPlot.data1 <- compareLOELs.2[category=="intra_neuro", .(med=summary(LOEL)[3], Q1=summary(LOEL)[1], Q3=summary(LOEL)[5]), by=.(cpid)]
cHairPlot.data2 <- compareLOELs.2[category=="inter_neuro", .(med_x=summary(LOEL)[3], Q1_x=summary(LOEL)[1], Q3_x=summary(LOEL)[5]), by=.(cpid)]
# _x indicates values are derived from "extra" laboratory studies

cHairPlot.data <- merge(cHairPlot.data1, cHairPlot.data2, all = TRUE)
```
```{r, unity-plot}
unity_plot <- ggplot(cHairPlot.data, aes(x=med, y=med_x)) +
  geom_point() + 
  geom_abline(intercept=c(-1,0,1), slope = c(1,1,1), linetype=c("dashed","solid","dashed")) +
  ggrepel::geom_text_repel(aes(label=cpid,color=cpid), box.padding = 0.5) +
  lims(x=c(-2,2), y=c(-2,2)) +
  labs(x = "Median Neurotoxic LOEL Observed in this Study",
       y = "Median Neurotoxic LOEL Derived from Literature Review Studies",
       title = "Concordance of Neurotoxic LOELs Across Studies") +
  theme_bw() +
  theme(legend.position="none")
```

## Supplemental Tables
```{r  results= "hide", warning=FALSE, message=FALSE}

#read.me <- read.xlsx('input/README_supplementals.xlsx')
chem.tbl <- read.xlsx('input/Chemical_table_edit_16Nov23.xlsx')

list.supp <- list(#'README'= read.me,
                  'SuppTb1'=chem.tbl,
                  'SuppTb2'=tcpl_out.dt,
                  'SuppTb3'=mc5.sub,
                  'SuppTb4'=bxcx.params.dt,
                  'SuppTb5'=tidy_lmfit
                  # 'SuppTb4'=df.sum
                  )

write.xlsx(list.supp, file='./output/Supp_tbls_manuscript_24Nov2023.xlsx', overwrite=TRUE)

```
